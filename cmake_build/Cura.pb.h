// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cura.proto

#ifndef PROTOBUF_Cura_2eproto__INCLUDED
#define PROTOBUF_Cura_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cura {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Cura_2eproto();
void protobuf_AssignDesc_Cura_2eproto();
void protobuf_ShutdownFile_Cura_2eproto();

class Extruder;
class GCodeLayer;
class GCodePrefix;
class Layer;
class LayerOptimized;
class MaterialEstimates;
class Object;
class ObjectList;
class PathSegment;
class Polygon;
class PrintTimeMaterialEstimates;
class Progress;
class Setting;
class SettingExtruder;
class SettingList;
class Slice;
class SlicingFinished;

enum Polygon_Type {
  Polygon_Type_NoneType = 0,
  Polygon_Type_Inset0Type = 1,
  Polygon_Type_InsetXType = 2,
  Polygon_Type_SkinType = 3,
  Polygon_Type_SupportType = 4,
  Polygon_Type_SkirtType = 5,
  Polygon_Type_InfillType = 6,
  Polygon_Type_SupportInfillType = 7,
  Polygon_Type_MoveCombingType = 8,
  Polygon_Type_MoveRetractionType = 9,
  Polygon_Type_SupportInterfaceType = 10,
  Polygon_Type_PrimeTowerType = 11,
  Polygon_Type_Polygon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Polygon_Type_Polygon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Polygon_Type_IsValid(int value);
const Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_NoneType;
const Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_PrimeTowerType;
const int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor();
inline const ::std::string& Polygon_Type_Name(Polygon_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Polygon_Type_descriptor(), value);
}
inline bool Polygon_Type_Parse(
    const ::std::string& name, Polygon_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
enum PathSegment_PointType {
  PathSegment_PointType_Point2D = 0,
  PathSegment_PointType_Point3D = 1,
  PathSegment_PointType_PathSegment_PointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PathSegment_PointType_PathSegment_PointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PathSegment_PointType_IsValid(int value);
const PathSegment_PointType PathSegment_PointType_PointType_MIN = PathSegment_PointType_Point2D;
const PathSegment_PointType PathSegment_PointType_PointType_MAX = PathSegment_PointType_Point3D;
const int PathSegment_PointType_PointType_ARRAYSIZE = PathSegment_PointType_PointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PathSegment_PointType_descriptor();
inline const ::std::string& PathSegment_PointType_Name(PathSegment_PointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PathSegment_PointType_descriptor(), value);
}
inline bool PathSegment_PointType_Parse(
    const ::std::string& name, PathSegment_PointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PathSegment_PointType>(
    PathSegment_PointType_descriptor(), name, value);
}
// ===================================================================

class ObjectList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.ObjectList) */ {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectList& default_instance();

  void Swap(ObjectList* other);

  // implements Message ----------------------------------------------

  inline ObjectList* New() const { return New(NULL); }

  ObjectList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cura.proto.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::cura::proto::Object& objects(int index) const;
  ::cura::proto::Object* mutable_objects(int index);
  ::cura::proto::Object* add_objects();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Object >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::Object >&
      objects() const;

  // repeated .cura.proto.Setting settings = 2;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::cura::proto::Setting& settings(int index) const;
  ::cura::proto::Setting* mutable_settings(int index);
  ::cura::proto::Setting* add_settings();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
      mutable_settings();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
      settings() const;

  // @@protoc_insertion_point(class_scope:cura.proto.ObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Object > objects_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting > settings_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static ObjectList* default_instance_;
};
// -------------------------------------------------------------------

class Slice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Slice) */ {
 public:
  Slice();
  virtual ~Slice();

  Slice(const Slice& from);

  inline Slice& operator=(const Slice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Slice& default_instance();

  void Swap(Slice* other);

  // implements Message ----------------------------------------------

  inline Slice* New() const { return New(NULL); }

  Slice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Slice& from);
  void MergeFrom(const Slice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Slice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cura.proto.ObjectList object_lists = 1;
  int object_lists_size() const;
  void clear_object_lists();
  static const int kObjectListsFieldNumber = 1;
  const ::cura::proto::ObjectList& object_lists(int index) const;
  ::cura::proto::ObjectList* mutable_object_lists(int index);
  ::cura::proto::ObjectList* add_object_lists();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >*
      mutable_object_lists();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >&
      object_lists() const;

  // optional .cura.proto.SettingList global_settings = 2;
  bool has_global_settings() const;
  void clear_global_settings();
  static const int kGlobalSettingsFieldNumber = 2;
  const ::cura::proto::SettingList& global_settings() const;
  ::cura::proto::SettingList* mutable_global_settings();
  ::cura::proto::SettingList* release_global_settings();
  void set_allocated_global_settings(::cura::proto::SettingList* global_settings);

  // repeated .cura.proto.Extruder extruders = 3;
  int extruders_size() const;
  void clear_extruders();
  static const int kExtrudersFieldNumber = 3;
  const ::cura::proto::Extruder& extruders(int index) const;
  ::cura::proto::Extruder* mutable_extruders(int index);
  ::cura::proto::Extruder* add_extruders();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder >*
      mutable_extruders();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder >&
      extruders() const;

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  int limit_to_extruder_size() const;
  void clear_limit_to_extruder();
  static const int kLimitToExtruderFieldNumber = 4;
  const ::cura::proto::SettingExtruder& limit_to_extruder(int index) const;
  ::cura::proto::SettingExtruder* mutable_limit_to_extruder(int index);
  ::cura::proto::SettingExtruder* add_limit_to_extruder();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder >*
      mutable_limit_to_extruder();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder >&
      limit_to_extruder() const;

  // @@protoc_insertion_point(class_scope:cura.proto.Slice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList > object_lists_;
  ::cura::proto::SettingList* global_settings_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder > extruders_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder > limit_to_extruder_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Slice* default_instance_;
};
// -------------------------------------------------------------------

class Extruder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Extruder) */ {
 public:
  Extruder();
  virtual ~Extruder();

  Extruder(const Extruder& from);

  inline Extruder& operator=(const Extruder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Extruder& default_instance();

  void Swap(Extruder* other);

  // implements Message ----------------------------------------------

  inline Extruder* New() const { return New(NULL); }

  Extruder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Extruder& from);
  void MergeFrom(const Extruder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Extruder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .cura.proto.SettingList settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::cura::proto::SettingList& settings() const;
  ::cura::proto::SettingList* mutable_settings();
  ::cura::proto::SettingList* release_settings();
  void set_allocated_settings(::cura::proto::SettingList* settings);

  // @@protoc_insertion_point(class_scope:cura.proto.Extruder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cura::proto::SettingList* settings_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Extruder* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  inline Object* New() const { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional bytes vertices = 2;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  const ::std::string& vertices() const;
  void set_vertices(const ::std::string& value);
  void set_vertices(const char* value);
  void set_vertices(const void* value, size_t size);
  ::std::string* mutable_vertices();
  ::std::string* release_vertices();
  void set_allocated_vertices(::std::string* vertices);

  // optional bytes normals = 3;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  const ::std::string& normals() const;
  void set_normals(const ::std::string& value);
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  ::std::string* mutable_normals();
  ::std::string* release_normals();
  void set_allocated_normals(::std::string* normals);

  // optional bytes indices = 4;
  void clear_indices();
  static const int kIndicesFieldNumber = 4;
  const ::std::string& indices() const;
  void set_indices(const ::std::string& value);
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  ::std::string* mutable_indices();
  ::std::string* release_indices();
  void set_allocated_indices(::std::string* indices);

  // repeated .cura.proto.Setting settings = 5;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 5;
  const ::cura::proto::Setting& settings(int index) const;
  ::cura::proto::Setting* mutable_settings(int index);
  ::cura::proto::Setting* add_settings();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
      mutable_settings();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
      settings() const;

  // optional string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:cura.proto.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr vertices_;
  ::google::protobuf::internal::ArenaStringPtr normals_;
  ::google::protobuf::internal::ArenaStringPtr indices_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting > settings_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class Progress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Progress) */ {
 public:
  Progress();
  virtual ~Progress();

  Progress(const Progress& from);

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Progress& default_instance();

  void Swap(Progress* other);

  // implements Message ----------------------------------------------

  inline Progress* New() const { return New(NULL); }

  Progress* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Progress& from);
  void MergeFrom(const Progress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Progress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  float amount() const;
  void set_amount(float value);

  // @@protoc_insertion_point(class_scope:cura.proto.Progress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Progress* default_instance_;
};
// -------------------------------------------------------------------

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  void Swap(Layer* other);

  // implements Message ----------------------------------------------

  inline Layer* New() const { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // optional float thickness = 3;
  void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  float thickness() const;
  void set_thickness(float value);

  // repeated .cura.proto.Polygon polygons = 4;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 4;
  const ::cura::proto::Polygon& polygons(int index) const;
  ::cura::proto::Polygon* mutable_polygons(int index);
  ::cura::proto::Polygon* add_polygons();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >*
      mutable_polygons();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:cura.proto.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  float height_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon > polygons_;
  float thickness_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Layer* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  inline Polygon* New() const { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static const Type NoneType =
    Polygon_Type_NoneType;
  static const Type Inset0Type =
    Polygon_Type_Inset0Type;
  static const Type InsetXType =
    Polygon_Type_InsetXType;
  static const Type SkinType =
    Polygon_Type_SkinType;
  static const Type SupportType =
    Polygon_Type_SupportType;
  static const Type SkirtType =
    Polygon_Type_SkirtType;
  static const Type InfillType =
    Polygon_Type_InfillType;
  static const Type SupportInfillType =
    Polygon_Type_SupportInfillType;
  static const Type MoveCombingType =
    Polygon_Type_MoveCombingType;
  static const Type MoveRetractionType =
    Polygon_Type_MoveRetractionType;
  static const Type SupportInterfaceType =
    Polygon_Type_SupportInterfaceType;
  static const Type PrimeTowerType =
    Polygon_Type_PrimeTowerType;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Polygon_Type_Type_MIN;
  static const Type Type_MAX =
    Polygon_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Polygon_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .cura.proto.Polygon.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cura::proto::Polygon_Type type() const;
  void set_type(::cura::proto::Polygon_Type value);

  // optional bytes points = 2;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const ::std::string& points() const;
  void set_points(const ::std::string& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  ::std::string* mutable_points();
  ::std::string* release_points();
  void set_allocated_points(::std::string* points);

  // optional float line_width = 3;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 3;
  float line_width() const;
  void set_line_width(float value);

  // optional float line_thickness = 4;
  void clear_line_thickness();
  static const int kLineThicknessFieldNumber = 4;
  float line_thickness() const;
  void set_line_thickness(float value);

  // optional float line_feedrate = 5;
  void clear_line_feedrate();
  static const int kLineFeedrateFieldNumber = 5;
  float line_feedrate() const;
  void set_line_feedrate(float value);

  // @@protoc_insertion_point(class_scope:cura.proto.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr points_;
  int type_;
  float line_width_;
  float line_thickness_;
  float line_feedrate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// -------------------------------------------------------------------

class LayerOptimized : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.LayerOptimized) */ {
 public:
  LayerOptimized();
  virtual ~LayerOptimized();

  LayerOptimized(const LayerOptimized& from);

  inline LayerOptimized& operator=(const LayerOptimized& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerOptimized& default_instance();

  void Swap(LayerOptimized* other);

  // implements Message ----------------------------------------------

  inline LayerOptimized* New() const { return New(NULL); }

  LayerOptimized* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerOptimized& from);
  void MergeFrom(const LayerOptimized& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerOptimized* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // optional float thickness = 3;
  void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  float thickness() const;
  void set_thickness(float value);

  // repeated .cura.proto.PathSegment path_segment = 4;
  int path_segment_size() const;
  void clear_path_segment();
  static const int kPathSegmentFieldNumber = 4;
  const ::cura::proto::PathSegment& path_segment(int index) const;
  ::cura::proto::PathSegment* mutable_path_segment(int index);
  ::cura::proto::PathSegment* add_path_segment();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment >*
      mutable_path_segment();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment >&
      path_segment() const;

  // @@protoc_insertion_point(class_scope:cura.proto.LayerOptimized)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  float height_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment > path_segment_;
  float thickness_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static LayerOptimized* default_instance_;
};
// -------------------------------------------------------------------

class PathSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.PathSegment) */ {
 public:
  PathSegment();
  virtual ~PathSegment();

  PathSegment(const PathSegment& from);

  inline PathSegment& operator=(const PathSegment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathSegment& default_instance();

  void Swap(PathSegment* other);

  // implements Message ----------------------------------------------

  inline PathSegment* New() const { return New(NULL); }

  PathSegment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathSegment& from);
  void MergeFrom(const PathSegment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PathSegment_PointType PointType;
  static const PointType Point2D =
    PathSegment_PointType_Point2D;
  static const PointType Point3D =
    PathSegment_PointType_Point3D;
  static inline bool PointType_IsValid(int value) {
    return PathSegment_PointType_IsValid(value);
  }
  static const PointType PointType_MIN =
    PathSegment_PointType_PointType_MIN;
  static const PointType PointType_MAX =
    PathSegment_PointType_PointType_MAX;
  static const int PointType_ARRAYSIZE =
    PathSegment_PointType_PointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointType_descriptor() {
    return PathSegment_PointType_descriptor();
  }
  static inline const ::std::string& PointType_Name(PointType value) {
    return PathSegment_PointType_Name(value);
  }
  static inline bool PointType_Parse(const ::std::string& name,
      PointType* value) {
    return PathSegment_PointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 extruder = 1;
  void clear_extruder();
  static const int kExtruderFieldNumber = 1;
  ::google::protobuf::int32 extruder() const;
  void set_extruder(::google::protobuf::int32 value);

  // optional .cura.proto.PathSegment.PointType point_type = 2;
  void clear_point_type();
  static const int kPointTypeFieldNumber = 2;
  ::cura::proto::PathSegment_PointType point_type() const;
  void set_point_type(::cura::proto::PathSegment_PointType value);

  // optional bytes points = 3;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::std::string& points() const;
  void set_points(const ::std::string& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  ::std::string* mutable_points();
  ::std::string* release_points();
  void set_allocated_points(::std::string* points);

  // optional bytes line_type = 4;
  void clear_line_type();
  static const int kLineTypeFieldNumber = 4;
  const ::std::string& line_type() const;
  void set_line_type(const ::std::string& value);
  void set_line_type(const char* value);
  void set_line_type(const void* value, size_t size);
  ::std::string* mutable_line_type();
  ::std::string* release_line_type();
  void set_allocated_line_type(::std::string* line_type);

  // optional bytes line_width = 5;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 5;
  const ::std::string& line_width() const;
  void set_line_width(const ::std::string& value);
  void set_line_width(const char* value);
  void set_line_width(const void* value, size_t size);
  ::std::string* mutable_line_width();
  ::std::string* release_line_width();
  void set_allocated_line_width(::std::string* line_width);

  // optional bytes line_thickness = 6;
  void clear_line_thickness();
  static const int kLineThicknessFieldNumber = 6;
  const ::std::string& line_thickness() const;
  void set_line_thickness(const ::std::string& value);
  void set_line_thickness(const char* value);
  void set_line_thickness(const void* value, size_t size);
  ::std::string* mutable_line_thickness();
  ::std::string* release_line_thickness();
  void set_allocated_line_thickness(::std::string* line_thickness);

  // optional bytes line_feedrate = 7;
  void clear_line_feedrate();
  static const int kLineFeedrateFieldNumber = 7;
  const ::std::string& line_feedrate() const;
  void set_line_feedrate(const ::std::string& value);
  void set_line_feedrate(const char* value);
  void set_line_feedrate(const void* value, size_t size);
  ::std::string* mutable_line_feedrate();
  ::std::string* release_line_feedrate();
  void set_allocated_line_feedrate(::std::string* line_feedrate);

  // @@protoc_insertion_point(class_scope:cura.proto.PathSegment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 extruder_;
  int point_type_;
  ::google::protobuf::internal::ArenaStringPtr points_;
  ::google::protobuf::internal::ArenaStringPtr line_type_;
  ::google::protobuf::internal::ArenaStringPtr line_width_;
  ::google::protobuf::internal::ArenaStringPtr line_thickness_;
  ::google::protobuf::internal::ArenaStringPtr line_feedrate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static PathSegment* default_instance_;
};
// -------------------------------------------------------------------

class GCodeLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.GCodeLayer) */ {
 public:
  GCodeLayer();
  virtual ~GCodeLayer();

  GCodeLayer(const GCodeLayer& from);

  inline GCodeLayer& operator=(const GCodeLayer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCodeLayer& default_instance();

  void Swap(GCodeLayer* other);

  // implements Message ----------------------------------------------

  inline GCodeLayer* New() const { return New(NULL); }

  GCodeLayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCodeLayer& from);
  void MergeFrom(const GCodeLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GCodeLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:cura.proto.GCodeLayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static GCodeLayer* default_instance_;
};
// -------------------------------------------------------------------

class PrintTimeMaterialEstimates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.PrintTimeMaterialEstimates) */ {
 public:
  PrintTimeMaterialEstimates();
  virtual ~PrintTimeMaterialEstimates();

  PrintTimeMaterialEstimates(const PrintTimeMaterialEstimates& from);

  inline PrintTimeMaterialEstimates& operator=(const PrintTimeMaterialEstimates& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrintTimeMaterialEstimates& default_instance();

  void Swap(PrintTimeMaterialEstimates* other);

  // implements Message ----------------------------------------------

  inline PrintTimeMaterialEstimates* New() const { return New(NULL); }

  PrintTimeMaterialEstimates* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrintTimeMaterialEstimates& from);
  void MergeFrom(const PrintTimeMaterialEstimates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrintTimeMaterialEstimates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float time_none = 1;
  void clear_time_none();
  static const int kTimeNoneFieldNumber = 1;
  float time_none() const;
  void set_time_none(float value);

  // optional float time_inset_0 = 2;
  void clear_time_inset_0();
  static const int kTimeInset0FieldNumber = 2;
  float time_inset_0() const;
  void set_time_inset_0(float value);

  // optional float time_inset_x = 3;
  void clear_time_inset_x();
  static const int kTimeInsetXFieldNumber = 3;
  float time_inset_x() const;
  void set_time_inset_x(float value);

  // optional float time_skin = 4;
  void clear_time_skin();
  static const int kTimeSkinFieldNumber = 4;
  float time_skin() const;
  void set_time_skin(float value);

  // optional float time_support = 5;
  void clear_time_support();
  static const int kTimeSupportFieldNumber = 5;
  float time_support() const;
  void set_time_support(float value);

  // optional float time_skirt = 6;
  void clear_time_skirt();
  static const int kTimeSkirtFieldNumber = 6;
  float time_skirt() const;
  void set_time_skirt(float value);

  // optional float time_infill = 7;
  void clear_time_infill();
  static const int kTimeInfillFieldNumber = 7;
  float time_infill() const;
  void set_time_infill(float value);

  // optional float time_support_infill = 8;
  void clear_time_support_infill();
  static const int kTimeSupportInfillFieldNumber = 8;
  float time_support_infill() const;
  void set_time_support_infill(float value);

  // optional float time_travel = 9;
  void clear_time_travel();
  static const int kTimeTravelFieldNumber = 9;
  float time_travel() const;
  void set_time_travel(float value);

  // optional float time_retract = 10;
  void clear_time_retract();
  static const int kTimeRetractFieldNumber = 10;
  float time_retract() const;
  void set_time_retract(float value);

  // optional float time_support_interface = 11;
  void clear_time_support_interface();
  static const int kTimeSupportInterfaceFieldNumber = 11;
  float time_support_interface() const;
  void set_time_support_interface(float value);

  // optional float time_prime_tower = 12;
  void clear_time_prime_tower();
  static const int kTimePrimeTowerFieldNumber = 12;
  float time_prime_tower() const;
  void set_time_prime_tower(float value);

  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  int materialestimates_size() const;
  void clear_materialestimates();
  static const int kMaterialEstimatesFieldNumber = 13;
  const ::cura::proto::MaterialEstimates& materialestimates(int index) const;
  ::cura::proto::MaterialEstimates* mutable_materialestimates(int index);
  ::cura::proto::MaterialEstimates* add_materialestimates();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates >*
      mutable_materialestimates();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates >&
      materialestimates() const;

  // @@protoc_insertion_point(class_scope:cura.proto.PrintTimeMaterialEstimates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float time_none_;
  float time_inset_0_;
  float time_inset_x_;
  float time_skin_;
  float time_support_;
  float time_skirt_;
  float time_infill_;
  float time_support_infill_;
  float time_travel_;
  float time_retract_;
  float time_support_interface_;
  float time_prime_tower_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates > materialestimates_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static PrintTimeMaterialEstimates* default_instance_;
};
// -------------------------------------------------------------------

class MaterialEstimates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.MaterialEstimates) */ {
 public:
  MaterialEstimates();
  virtual ~MaterialEstimates();

  MaterialEstimates(const MaterialEstimates& from);

  inline MaterialEstimates& operator=(const MaterialEstimates& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialEstimates& default_instance();

  void Swap(MaterialEstimates* other);

  // implements Message ----------------------------------------------

  inline MaterialEstimates* New() const { return New(NULL); }

  MaterialEstimates* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialEstimates& from);
  void MergeFrom(const MaterialEstimates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MaterialEstimates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional float material_amount = 2;
  void clear_material_amount();
  static const int kMaterialAmountFieldNumber = 2;
  float material_amount() const;
  void set_material_amount(float value);

  // @@protoc_insertion_point(class_scope:cura.proto.MaterialEstimates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  float material_amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static MaterialEstimates* default_instance_;
};
// -------------------------------------------------------------------

class SettingList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.SettingList) */ {
 public:
  SettingList();
  virtual ~SettingList();

  SettingList(const SettingList& from);

  inline SettingList& operator=(const SettingList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingList& default_instance();

  void Swap(SettingList* other);

  // implements Message ----------------------------------------------

  inline SettingList* New() const { return New(NULL); }

  SettingList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SettingList& from);
  void MergeFrom(const SettingList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SettingList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cura.proto.Setting settings = 1;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::cura::proto::Setting& settings(int index) const;
  ::cura::proto::Setting* mutable_settings(int index);
  ::cura::proto::Setting* add_settings();
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
      mutable_settings();
  const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
      settings() const;

  // @@protoc_insertion_point(class_scope:cura.proto.SettingList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting > settings_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static SettingList* default_instance_;
};
// -------------------------------------------------------------------

class Setting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.Setting) */ {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Setting& default_instance();

  void Swap(Setting* other);

  // implements Message ----------------------------------------------

  inline Setting* New() const { return New(NULL); }

  Setting* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Setting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cura.proto.Setting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static Setting* default_instance_;
};
// -------------------------------------------------------------------

class SettingExtruder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.SettingExtruder) */ {
 public:
  SettingExtruder();
  virtual ~SettingExtruder();

  SettingExtruder(const SettingExtruder& from);

  inline SettingExtruder& operator=(const SettingExtruder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingExtruder& default_instance();

  void Swap(SettingExtruder* other);

  // implements Message ----------------------------------------------

  inline SettingExtruder* New() const { return New(NULL); }

  SettingExtruder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SettingExtruder& from);
  void MergeFrom(const SettingExtruder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SettingExtruder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 extruder = 2;
  void clear_extruder();
  static const int kExtruderFieldNumber = 2;
  ::google::protobuf::int32 extruder() const;
  void set_extruder(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cura.proto.SettingExtruder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 extruder_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static SettingExtruder* default_instance_;
};
// -------------------------------------------------------------------

class GCodePrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.GCodePrefix) */ {
 public:
  GCodePrefix();
  virtual ~GCodePrefix();

  GCodePrefix(const GCodePrefix& from);

  inline GCodePrefix& operator=(const GCodePrefix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCodePrefix& default_instance();

  void Swap(GCodePrefix* other);

  // implements Message ----------------------------------------------

  inline GCodePrefix* New() const { return New(NULL); }

  GCodePrefix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCodePrefix& from);
  void MergeFrom(const GCodePrefix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GCodePrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:cura.proto.GCodePrefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static GCodePrefix* default_instance_;
};
// -------------------------------------------------------------------

class SlicingFinished : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cura.proto.SlicingFinished) */ {
 public:
  SlicingFinished();
  virtual ~SlicingFinished();

  SlicingFinished(const SlicingFinished& from);

  inline SlicingFinished& operator=(const SlicingFinished& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicingFinished& default_instance();

  void Swap(SlicingFinished* other);

  // implements Message ----------------------------------------------

  inline SlicingFinished* New() const { return New(NULL); }

  SlicingFinished* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlicingFinished& from);
  void MergeFrom(const SlicingFinished& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlicingFinished* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cura.proto.SlicingFinished)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Cura_2eproto();
  friend void protobuf_AssignDesc_Cura_2eproto();
  friend void protobuf_ShutdownFile_Cura_2eproto();

  void InitAsDefaultInstance();
  static SlicingFinished* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectList

// repeated .cura.proto.Object objects = 1;
inline int ObjectList::objects_size() const {
  return objects_.size();
}
inline void ObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::cura::proto::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.objects)
  return objects_.Get(index);
}
inline ::cura::proto::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.objects)
  return objects_.Mutable(index);
}
inline ::cura::proto::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.objects)
  return objects_;
}

// repeated .cura.proto.Setting settings = 2;
inline int ObjectList::settings_size() const {
  return settings_.size();
}
inline void ObjectList::clear_settings() {
  settings_.Clear();
}
inline const ::cura::proto::Setting& ObjectList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.settings)
  return settings_.Get(index);
}
inline ::cura::proto::Setting* ObjectList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.settings)
  return settings_.Mutable(index);
}
inline ::cura::proto::Setting* ObjectList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.settings)
  return settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
ObjectList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.settings)
  return &settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
ObjectList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.settings)
  return settings_;
}

// -------------------------------------------------------------------

// Slice

// repeated .cura.proto.ObjectList object_lists = 1;
inline int Slice::object_lists_size() const {
  return object_lists_.size();
}
inline void Slice::clear_object_lists() {
  object_lists_.Clear();
}
inline const ::cura::proto::ObjectList& Slice::object_lists(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.object_lists)
  return object_lists_.Get(index);
}
inline ::cura::proto::ObjectList* Slice::mutable_object_lists(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.object_lists)
  return object_lists_.Mutable(index);
}
inline ::cura::proto::ObjectList* Slice::add_object_lists() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.object_lists)
  return object_lists_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >*
Slice::mutable_object_lists() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.object_lists)
  return &object_lists_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >&
Slice::object_lists() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.object_lists)
  return object_lists_;
}

// optional .cura.proto.SettingList global_settings = 2;
inline bool Slice::has_global_settings() const {
  return !_is_default_instance_ && global_settings_ != NULL;
}
inline void Slice::clear_global_settings() {
  if (GetArenaNoVirtual() == NULL && global_settings_ != NULL) delete global_settings_;
  global_settings_ = NULL;
}
inline const ::cura::proto::SettingList& Slice::global_settings() const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.global_settings)
  return global_settings_ != NULL ? *global_settings_ : *default_instance_->global_settings_;
}
inline ::cura::proto::SettingList* Slice::mutable_global_settings() {
  
  if (global_settings_ == NULL) {
    global_settings_ = new ::cura::proto::SettingList;
  }
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.global_settings)
  return global_settings_;
}
inline ::cura::proto::SettingList* Slice::release_global_settings() {
  // @@protoc_insertion_point(field_release:cura.proto.Slice.global_settings)
  
  ::cura::proto::SettingList* temp = global_settings_;
  global_settings_ = NULL;
  return temp;
}
inline void Slice::set_allocated_global_settings(::cura::proto::SettingList* global_settings) {
  delete global_settings_;
  global_settings_ = global_settings;
  if (global_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Slice.global_settings)
}

// repeated .cura.proto.Extruder extruders = 3;
inline int Slice::extruders_size() const {
  return extruders_.size();
}
inline void Slice::clear_extruders() {
  extruders_.Clear();
}
inline const ::cura::proto::Extruder& Slice::extruders(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.extruders)
  return extruders_.Get(index);
}
inline ::cura::proto::Extruder* Slice::mutable_extruders(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.extruders)
  return extruders_.Mutable(index);
}
inline ::cura::proto::Extruder* Slice::add_extruders() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.extruders)
  return extruders_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder >*
Slice::mutable_extruders() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.extruders)
  return &extruders_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder >&
Slice::extruders() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.extruders)
  return extruders_;
}

// repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
inline int Slice::limit_to_extruder_size() const {
  return limit_to_extruder_.size();
}
inline void Slice::clear_limit_to_extruder() {
  limit_to_extruder_.Clear();
}
inline const ::cura::proto::SettingExtruder& Slice::limit_to_extruder(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Get(index);
}
inline ::cura::proto::SettingExtruder* Slice::mutable_limit_to_extruder(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Mutable(index);
}
inline ::cura::proto::SettingExtruder* Slice::add_limit_to_extruder() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder >*
Slice::mutable_limit_to_extruder() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.limit_to_extruder)
  return &limit_to_extruder_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder >&
Slice::limit_to_extruder() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_;
}

// -------------------------------------------------------------------

// Extruder

// optional int32 id = 1;
inline void Extruder::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Extruder::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Extruder.id)
  return id_;
}
inline void Extruder::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Extruder.id)
}

// optional .cura.proto.SettingList settings = 2;
inline bool Extruder::has_settings() const {
  return !_is_default_instance_ && settings_ != NULL;
}
inline void Extruder::clear_settings() {
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) delete settings_;
  settings_ = NULL;
}
inline const ::cura::proto::SettingList& Extruder::settings() const {
  // @@protoc_insertion_point(field_get:cura.proto.Extruder.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::cura::proto::SettingList* Extruder::mutable_settings() {
  
  if (settings_ == NULL) {
    settings_ = new ::cura::proto::SettingList;
  }
  // @@protoc_insertion_point(field_mutable:cura.proto.Extruder.settings)
  return settings_;
}
inline ::cura::proto::SettingList* Extruder::release_settings() {
  // @@protoc_insertion_point(field_release:cura.proto.Extruder.settings)
  
  ::cura::proto::SettingList* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void Extruder::set_allocated_settings(::cura::proto::SettingList* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Extruder.settings)
}

// -------------------------------------------------------------------

// Object

// optional int64 id = 1;
inline void Object::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Object.id)
}

// optional bytes vertices = 2;
inline void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.vertices)
  return vertices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_vertices(const ::std::string& value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.vertices)
}
inline void Object::set_vertices(const char* value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.vertices)
}
inline void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.vertices)
}
inline ::std::string* Object::mutable_vertices() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_vertices() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.vertices)
  
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.vertices)
}

// optional bytes normals = 3;
inline void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.normals)
}
inline void Object::set_normals(const char* value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.normals)
}
inline void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.normals)
}
inline ::std::string* Object::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_normals() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.normals)
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.normals)
}

// optional bytes indices = 4;
inline void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.indices)
}
inline void Object::set_indices(const char* value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.indices)
}
inline void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.indices)
}
inline ::std::string* Object::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_indices() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.indices)
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.indices)
}

// repeated .cura.proto.Setting settings = 5;
inline int Object::settings_size() const {
  return settings_.size();
}
inline void Object::clear_settings() {
  settings_.Clear();
}
inline const ::cura::proto::Setting& Object::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.settings)
  return settings_.Get(index);
}
inline ::cura::proto::Setting* Object::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.settings)
  return settings_.Mutable(index);
}
inline ::cura::proto::Setting* Object::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.Object.settings)
  return settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
Object::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Object.settings)
  return &settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
Object::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.Object.settings)
  return settings_;
}

// optional string name = 6;
inline void Object::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.name)
}
inline void Object::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.name)
}
inline void Object::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.name)
}
inline ::std::string* Object::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.name)
}

// -------------------------------------------------------------------

// Progress

// optional float amount = 1;
inline void Progress::clear_amount() {
  amount_ = 0;
}
inline float Progress::amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.Progress.amount)
  return amount_;
}
inline void Progress::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Progress.amount)
}

// -------------------------------------------------------------------

// Layer

// optional int32 id = 1;
inline void Layer::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Layer::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.id)
  return id_;
}
inline void Layer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.id)
}

// optional float height = 2;
inline void Layer::clear_height() {
  height_ = 0;
}
inline float Layer::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.height)
  return height_;
}
inline void Layer::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.height)
}

// optional float thickness = 3;
inline void Layer::clear_thickness() {
  thickness_ = 0;
}
inline float Layer::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.thickness)
  return thickness_;
}
inline void Layer::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.thickness)
}

// repeated .cura.proto.Polygon polygons = 4;
inline int Layer::polygons_size() const {
  return polygons_.size();
}
inline void Layer::clear_polygons() {
  polygons_.Clear();
}
inline const ::cura::proto::Polygon& Layer::polygons(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.polygons)
  return polygons_.Get(index);
}
inline ::cura::proto::Polygon* Layer::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Layer.polygons)
  return polygons_.Mutable(index);
}
inline ::cura::proto::Polygon* Layer::add_polygons() {
  // @@protoc_insertion_point(field_add:cura.proto.Layer.polygons)
  return polygons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >*
Layer::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Layer.polygons)
  return &polygons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >&
Layer::polygons() const {
  // @@protoc_insertion_point(field_list:cura.proto.Layer.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Polygon

// optional .cura.proto.Polygon.Type type = 1;
inline void Polygon::clear_type() {
  type_ = 0;
}
inline ::cura::proto::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.type)
  return static_cast< ::cura::proto::Polygon_Type >(type_);
}
inline void Polygon::set_type(::cura::proto::Polygon_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.type)
}

// optional bytes points = 2;
inline void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.points)
  return points_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.points)
}
inline void Polygon::set_points(const char* value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Polygon.points)
}
inline void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Polygon.points)
}
inline ::std::string* Polygon::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Polygon.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polygon::release_points() {
  // @@protoc_insertion_point(field_release:cura.proto.Polygon.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Polygon.points)
}

// optional float line_width = 3;
inline void Polygon::clear_line_width() {
  line_width_ = 0;
}
inline float Polygon::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_width)
  return line_width_;
}
inline void Polygon::set_line_width(float value) {
  
  line_width_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_width)
}

// optional float line_thickness = 4;
inline void Polygon::clear_line_thickness() {
  line_thickness_ = 0;
}
inline float Polygon::line_thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_thickness)
  return line_thickness_;
}
inline void Polygon::set_line_thickness(float value) {
  
  line_thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_thickness)
}

// optional float line_feedrate = 5;
inline void Polygon::clear_line_feedrate() {
  line_feedrate_ = 0;
}
inline float Polygon::line_feedrate() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_feedrate)
  return line_feedrate_;
}
inline void Polygon::set_line_feedrate(float value) {
  
  line_feedrate_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_feedrate)
}

// -------------------------------------------------------------------

// LayerOptimized

// optional int32 id = 1;
inline void LayerOptimized::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LayerOptimized::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.id)
  return id_;
}
inline void LayerOptimized::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.id)
}

// optional float height = 2;
inline void LayerOptimized::clear_height() {
  height_ = 0;
}
inline float LayerOptimized::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.height)
  return height_;
}
inline void LayerOptimized::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.height)
}

// optional float thickness = 3;
inline void LayerOptimized::clear_thickness() {
  thickness_ = 0;
}
inline float LayerOptimized::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.thickness)
  return thickness_;
}
inline void LayerOptimized::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.thickness)
}

// repeated .cura.proto.PathSegment path_segment = 4;
inline int LayerOptimized::path_segment_size() const {
  return path_segment_.size();
}
inline void LayerOptimized::clear_path_segment() {
  path_segment_.Clear();
}
inline const ::cura::proto::PathSegment& LayerOptimized::path_segment(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Get(index);
}
inline ::cura::proto::PathSegment* LayerOptimized::mutable_path_segment(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Mutable(index);
}
inline ::cura::proto::PathSegment* LayerOptimized::add_path_segment() {
  // @@protoc_insertion_point(field_add:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment >*
LayerOptimized::mutable_path_segment() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.LayerOptimized.path_segment)
  return &path_segment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment >&
LayerOptimized::path_segment() const {
  // @@protoc_insertion_point(field_list:cura.proto.LayerOptimized.path_segment)
  return path_segment_;
}

// -------------------------------------------------------------------

// PathSegment

// optional int32 extruder = 1;
inline void PathSegment::clear_extruder() {
  extruder_ = 0;
}
inline ::google::protobuf::int32 PathSegment::extruder() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.extruder)
  return extruder_;
}
inline void PathSegment::set_extruder(::google::protobuf::int32 value) {
  
  extruder_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.extruder)
}

// optional .cura.proto.PathSegment.PointType point_type = 2;
inline void PathSegment::clear_point_type() {
  point_type_ = 0;
}
inline ::cura::proto::PathSegment_PointType PathSegment::point_type() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.point_type)
  return static_cast< ::cura::proto::PathSegment_PointType >(point_type_);
}
inline void PathSegment::set_point_type(::cura::proto::PathSegment_PointType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.point_type)
}

// optional bytes points = 3;
inline void PathSegment::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathSegment::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.points)
  return points_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.points)
}
inline void PathSegment::set_points(const char* value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.points)
}
inline void PathSegment::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.points)
}
inline ::std::string* PathSegment::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathSegment::release_points() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.points)
}

// optional bytes line_type = 4;
inline void PathSegment::clear_line_type() {
  line_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathSegment::line_type() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_type)
  return line_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_line_type(const ::std::string& value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_type)
}
inline void PathSegment::set_line_type(const char* value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_type)
}
inline void PathSegment::set_line_type(const void* value, size_t size) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_type)
}
inline ::std::string* PathSegment::mutable_line_type() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_type)
  return line_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathSegment::release_line_type() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_type)
  
  return line_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_type(::std::string* line_type) {
  if (line_type != NULL) {
    
  } else {
    
  }
  line_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_type);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_type)
}

// optional bytes line_width = 5;
inline void PathSegment::clear_line_width() {
  line_width_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathSegment::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_width)
  return line_width_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_line_width(const ::std::string& value) {
  
  line_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_width)
}
inline void PathSegment::set_line_width(const char* value) {
  
  line_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_width)
}
inline void PathSegment::set_line_width(const void* value, size_t size) {
  
  line_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_width)
}
inline ::std::string* PathSegment::mutable_line_width() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_width)
  return line_width_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathSegment::release_line_width() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_width)
  
  return line_width_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_width(::std::string* line_width) {
  if (line_width != NULL) {
    
  } else {
    
  }
  line_width_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_width);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_width)
}

// optional bytes line_thickness = 6;
inline void PathSegment::clear_line_thickness() {
  line_thickness_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathSegment::line_thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_thickness)
  return line_thickness_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_line_thickness(const ::std::string& value) {
  
  line_thickness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_thickness)
}
inline void PathSegment::set_line_thickness(const char* value) {
  
  line_thickness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_thickness)
}
inline void PathSegment::set_line_thickness(const void* value, size_t size) {
  
  line_thickness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_thickness)
}
inline ::std::string* PathSegment::mutable_line_thickness() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_thickness)
  return line_thickness_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathSegment::release_line_thickness() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_thickness)
  
  return line_thickness_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_thickness(::std::string* line_thickness) {
  if (line_thickness != NULL) {
    
  } else {
    
  }
  line_thickness_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_thickness);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_thickness)
}

// optional bytes line_feedrate = 7;
inline void PathSegment::clear_line_feedrate() {
  line_feedrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathSegment::line_feedrate() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_feedrate)
  return line_feedrate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_line_feedrate(const ::std::string& value) {
  
  line_feedrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_feedrate)
}
inline void PathSegment::set_line_feedrate(const char* value) {
  
  line_feedrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_feedrate)
}
inline void PathSegment::set_line_feedrate(const void* value, size_t size) {
  
  line_feedrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_feedrate)
}
inline ::std::string* PathSegment::mutable_line_feedrate() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_feedrate)
  return line_feedrate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathSegment::release_line_feedrate() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_feedrate)
  
  return line_feedrate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_feedrate(::std::string* line_feedrate) {
  if (line_feedrate != NULL) {
    
  } else {
    
  }
  line_feedrate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_feedrate);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_feedrate)
}

// -------------------------------------------------------------------

// GCodeLayer

// optional bytes data = 2;
inline void GCodeLayer::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCodeLayer::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodeLayer.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCodeLayer::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodeLayer.data)
}
inline void GCodeLayer::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodeLayer.data)
}
inline void GCodeLayer::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodeLayer.data)
}
inline ::std::string* GCodeLayer::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodeLayer.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCodeLayer::release_data() {
  // @@protoc_insertion_point(field_release:cura.proto.GCodeLayer.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCodeLayer::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodeLayer.data)
}

// -------------------------------------------------------------------

// PrintTimeMaterialEstimates

// optional float time_none = 1;
inline void PrintTimeMaterialEstimates::clear_time_none() {
  time_none_ = 0;
}
inline float PrintTimeMaterialEstimates::time_none() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_none)
  return time_none_;
}
inline void PrintTimeMaterialEstimates::set_time_none(float value) {
  
  time_none_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_none)
}

// optional float time_inset_0 = 2;
inline void PrintTimeMaterialEstimates::clear_time_inset_0() {
  time_inset_0_ = 0;
}
inline float PrintTimeMaterialEstimates::time_inset_0() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_inset_0)
  return time_inset_0_;
}
inline void PrintTimeMaterialEstimates::set_time_inset_0(float value) {
  
  time_inset_0_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_inset_0)
}

// optional float time_inset_x = 3;
inline void PrintTimeMaterialEstimates::clear_time_inset_x() {
  time_inset_x_ = 0;
}
inline float PrintTimeMaterialEstimates::time_inset_x() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_inset_x)
  return time_inset_x_;
}
inline void PrintTimeMaterialEstimates::set_time_inset_x(float value) {
  
  time_inset_x_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_inset_x)
}

// optional float time_skin = 4;
inline void PrintTimeMaterialEstimates::clear_time_skin() {
  time_skin_ = 0;
}
inline float PrintTimeMaterialEstimates::time_skin() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_skin)
  return time_skin_;
}
inline void PrintTimeMaterialEstimates::set_time_skin(float value) {
  
  time_skin_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_skin)
}

// optional float time_support = 5;
inline void PrintTimeMaterialEstimates::clear_time_support() {
  time_support_ = 0;
}
inline float PrintTimeMaterialEstimates::time_support() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support)
  return time_support_;
}
inline void PrintTimeMaterialEstimates::set_time_support(float value) {
  
  time_support_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support)
}

// optional float time_skirt = 6;
inline void PrintTimeMaterialEstimates::clear_time_skirt() {
  time_skirt_ = 0;
}
inline float PrintTimeMaterialEstimates::time_skirt() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_skirt)
  return time_skirt_;
}
inline void PrintTimeMaterialEstimates::set_time_skirt(float value) {
  
  time_skirt_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_skirt)
}

// optional float time_infill = 7;
inline void PrintTimeMaterialEstimates::clear_time_infill() {
  time_infill_ = 0;
}
inline float PrintTimeMaterialEstimates::time_infill() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_infill)
  return time_infill_;
}
inline void PrintTimeMaterialEstimates::set_time_infill(float value) {
  
  time_infill_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_infill)
}

// optional float time_support_infill = 8;
inline void PrintTimeMaterialEstimates::clear_time_support_infill() {
  time_support_infill_ = 0;
}
inline float PrintTimeMaterialEstimates::time_support_infill() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support_infill)
  return time_support_infill_;
}
inline void PrintTimeMaterialEstimates::set_time_support_infill(float value) {
  
  time_support_infill_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support_infill)
}

// optional float time_travel = 9;
inline void PrintTimeMaterialEstimates::clear_time_travel() {
  time_travel_ = 0;
}
inline float PrintTimeMaterialEstimates::time_travel() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_travel)
  return time_travel_;
}
inline void PrintTimeMaterialEstimates::set_time_travel(float value) {
  
  time_travel_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_travel)
}

// optional float time_retract = 10;
inline void PrintTimeMaterialEstimates::clear_time_retract() {
  time_retract_ = 0;
}
inline float PrintTimeMaterialEstimates::time_retract() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_retract)
  return time_retract_;
}
inline void PrintTimeMaterialEstimates::set_time_retract(float value) {
  
  time_retract_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_retract)
}

// optional float time_support_interface = 11;
inline void PrintTimeMaterialEstimates::clear_time_support_interface() {
  time_support_interface_ = 0;
}
inline float PrintTimeMaterialEstimates::time_support_interface() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support_interface)
  return time_support_interface_;
}
inline void PrintTimeMaterialEstimates::set_time_support_interface(float value) {
  
  time_support_interface_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support_interface)
}

// optional float time_prime_tower = 12;
inline void PrintTimeMaterialEstimates::clear_time_prime_tower() {
  time_prime_tower_ = 0;
}
inline float PrintTimeMaterialEstimates::time_prime_tower() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_prime_tower)
  return time_prime_tower_;
}
inline void PrintTimeMaterialEstimates::set_time_prime_tower(float value) {
  
  time_prime_tower_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_prime_tower)
}

// repeated .cura.proto.MaterialEstimates materialEstimates = 13;
inline int PrintTimeMaterialEstimates::materialestimates_size() const {
  return materialestimates_.size();
}
inline void PrintTimeMaterialEstimates::clear_materialestimates() {
  materialestimates_.Clear();
}
inline const ::cura::proto::MaterialEstimates& PrintTimeMaterialEstimates::materialestimates(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Get(index);
}
inline ::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::mutable_materialestimates(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Mutable(index);
}
inline ::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::add_materialestimates() {
  // @@protoc_insertion_point(field_add:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates >*
PrintTimeMaterialEstimates::mutable_materialestimates() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return &materialestimates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates >&
PrintTimeMaterialEstimates::materialestimates() const {
  // @@protoc_insertion_point(field_list:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_;
}

// -------------------------------------------------------------------

// MaterialEstimates

// optional int64 id = 1;
inline void MaterialEstimates::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MaterialEstimates::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.MaterialEstimates.id)
  return id_;
}
inline void MaterialEstimates::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.MaterialEstimates.id)
}

// optional float material_amount = 2;
inline void MaterialEstimates::clear_material_amount() {
  material_amount_ = 0;
}
inline float MaterialEstimates::material_amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.MaterialEstimates.material_amount)
  return material_amount_;
}
inline void MaterialEstimates::set_material_amount(float value) {
  
  material_amount_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.MaterialEstimates.material_amount)
}

// -------------------------------------------------------------------

// SettingList

// repeated .cura.proto.Setting settings = 1;
inline int SettingList::settings_size() const {
  return settings_.size();
}
inline void SettingList::clear_settings() {
  settings_.Clear();
}
inline const ::cura::proto::Setting& SettingList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingList.settings)
  return settings_.Get(index);
}
inline ::cura::proto::Setting* SettingList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingList.settings)
  return settings_.Mutable(index);
}
inline ::cura::proto::Setting* SettingList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.SettingList.settings)
  return settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
SettingList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.SettingList.settings)
  return &settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
SettingList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.SettingList.settings)
  return settings_;
}

// -------------------------------------------------------------------

// Setting

// optional string name = 1;
inline void Setting::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Setting::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.name)
}
inline void Setting::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.name)
}
inline void Setting::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.name)
}
inline ::std::string* Setting::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Setting::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.Setting.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.name)
}

// optional bytes value = 2;
inline void Setting::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Setting::value() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.value)
}
inline void Setting::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.value)
}
inline void Setting::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.value)
}
inline ::std::string* Setting::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Setting::release_value() {
  // @@protoc_insertion_point(field_release:cura.proto.Setting.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.value)
}

// -------------------------------------------------------------------

// SettingExtruder

// optional string name = 1;
inline void SettingExtruder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SettingExtruder::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingExtruder.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SettingExtruder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.SettingExtruder.name)
}
inline void SettingExtruder::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.SettingExtruder.name)
}
inline void SettingExtruder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.SettingExtruder.name)
}
inline ::std::string* SettingExtruder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingExtruder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SettingExtruder::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.SettingExtruder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SettingExtruder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.SettingExtruder.name)
}

// optional int32 extruder = 2;
inline void SettingExtruder::clear_extruder() {
  extruder_ = 0;
}
inline ::google::protobuf::int32 SettingExtruder::extruder() const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingExtruder.extruder)
  return extruder_;
}
inline void SettingExtruder::set_extruder(::google::protobuf::int32 value) {
  
  extruder_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.SettingExtruder.extruder)
}

// -------------------------------------------------------------------

// GCodePrefix

// optional bytes data = 2;
inline void GCodePrefix::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCodePrefix::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodePrefix.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCodePrefix::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodePrefix.data)
}
inline void GCodePrefix::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodePrefix.data)
}
inline void GCodePrefix::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodePrefix.data)
}
inline ::std::string* GCodePrefix::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodePrefix.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCodePrefix::release_data() {
  // @@protoc_insertion_point(field_release:cura.proto.GCodePrefix.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCodePrefix::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodePrefix.data)
}

// -------------------------------------------------------------------

// SlicingFinished

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cura

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cura::proto::Polygon_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cura::proto::Polygon_Type>() {
  return ::cura::proto::Polygon_Type_descriptor();
}
template <> struct is_proto_enum< ::cura::proto::PathSegment_PointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cura::proto::PathSegment_PointType>() {
  return ::cura::proto::PathSegment_PointType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Cura_2eproto__INCLUDED
