// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cura.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Cura.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cura {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ObjectList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Slice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extruder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extruder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* Progress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Progress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LayerOptimized_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerOptimized_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathSegment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PathSegment_PointType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GCodeLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCodeLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintTimeMaterialEstimates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintTimeMaterialEstimates_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialEstimates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialEstimates_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Setting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Setting_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingExtruder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingExtruder_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCodePrefix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCodePrefix_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlicingFinished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlicingFinished_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Cura_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Cura_2eproto() {
  protobuf_AddDesc_Cura_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Cura.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectList_descriptor_ = file->message_type(0);
  static const int ObjectList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, settings_),
  };
  ObjectList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectList_descriptor_,
      ObjectList::default_instance_,
      ObjectList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, _is_default_instance_));
  Slice_descriptor_ = file->message_type(1);
  static const int Slice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, object_lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, global_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, extruders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, limit_to_extruder_),
  };
  Slice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Slice_descriptor_,
      Slice::default_instance_,
      Slice_offsets_,
      -1,
      -1,
      -1,
      sizeof(Slice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _is_default_instance_));
  Extruder_descriptor_ = file->message_type(2);
  static const int Extruder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extruder, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extruder, settings_),
  };
  Extruder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extruder_descriptor_,
      Extruder::default_instance_,
      Extruder_offsets_,
      -1,
      -1,
      -1,
      sizeof(Extruder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extruder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extruder, _is_default_instance_));
  Object_descriptor_ = file->message_type(3);
  static const int Object_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, name_),
  };
  Object_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      -1,
      -1,
      -1,
      sizeof(Object),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _is_default_instance_));
  Progress_descriptor_ = file->message_type(4);
  static const int Progress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, amount_),
  };
  Progress_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Progress_descriptor_,
      Progress::default_instance_,
      Progress_offsets_,
      -1,
      -1,
      -1,
      sizeof(Progress),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, _is_default_instance_));
  Layer_descriptor_ = file->message_type(5);
  static const int Layer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, polygons_),
  };
  Layer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Layer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _is_default_instance_));
  Polygon_descriptor_ = file->message_type(6);
  static const int Polygon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, line_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, line_feedrate_),
  };
  Polygon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      -1,
      -1,
      -1,
      sizeof(Polygon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _is_default_instance_));
  Polygon_Type_descriptor_ = Polygon_descriptor_->enum_type(0);
  LayerOptimized_descriptor_ = file->message_type(7);
  static const int LayerOptimized_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerOptimized, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerOptimized, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerOptimized, thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerOptimized, path_segment_),
  };
  LayerOptimized_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayerOptimized_descriptor_,
      LayerOptimized::default_instance_,
      LayerOptimized_offsets_,
      -1,
      -1,
      -1,
      sizeof(LayerOptimized),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerOptimized, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerOptimized, _is_default_instance_));
  PathSegment_descriptor_ = file->message_type(8);
  static const int PathSegment_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, extruder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, point_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, line_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, line_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, line_feedrate_),
  };
  PathSegment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathSegment_descriptor_,
      PathSegment::default_instance_,
      PathSegment_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathSegment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSegment, _is_default_instance_));
  PathSegment_PointType_descriptor_ = PathSegment_descriptor_->enum_type(0);
  GCodeLayer_descriptor_ = file->message_type(9);
  static const int GCodeLayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, data_),
  };
  GCodeLayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCodeLayer_descriptor_,
      GCodeLayer::default_instance_,
      GCodeLayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(GCodeLayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, _is_default_instance_));
  PrintTimeMaterialEstimates_descriptor_ = file->message_type(10);
  static const int PrintTimeMaterialEstimates_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_none_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_inset_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_inset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_skin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_skirt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_infill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_support_infill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_travel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_retract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_support_interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, time_prime_tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, materialestimates_),
  };
  PrintTimeMaterialEstimates_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrintTimeMaterialEstimates_descriptor_,
      PrintTimeMaterialEstimates::default_instance_,
      PrintTimeMaterialEstimates_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrintTimeMaterialEstimates),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintTimeMaterialEstimates, _is_default_instance_));
  MaterialEstimates_descriptor_ = file->message_type(11);
  static const int MaterialEstimates_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialEstimates, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialEstimates, material_amount_),
  };
  MaterialEstimates_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaterialEstimates_descriptor_,
      MaterialEstimates::default_instance_,
      MaterialEstimates_offsets_,
      -1,
      -1,
      -1,
      sizeof(MaterialEstimates),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialEstimates, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialEstimates, _is_default_instance_));
  SettingList_descriptor_ = file->message_type(12);
  static const int SettingList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingList, settings_),
  };
  SettingList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SettingList_descriptor_,
      SettingList::default_instance_,
      SettingList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SettingList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingList, _is_default_instance_));
  Setting_descriptor_ = file->message_type(13);
  static const int Setting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, value_),
  };
  Setting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Setting_descriptor_,
      Setting::default_instance_,
      Setting_offsets_,
      -1,
      -1,
      -1,
      sizeof(Setting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, _is_default_instance_));
  SettingExtruder_descriptor_ = file->message_type(14);
  static const int SettingExtruder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingExtruder, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingExtruder, extruder_),
  };
  SettingExtruder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SettingExtruder_descriptor_,
      SettingExtruder::default_instance_,
      SettingExtruder_offsets_,
      -1,
      -1,
      -1,
      sizeof(SettingExtruder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingExtruder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingExtruder, _is_default_instance_));
  GCodePrefix_descriptor_ = file->message_type(15);
  static const int GCodePrefix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodePrefix, data_),
  };
  GCodePrefix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCodePrefix_descriptor_,
      GCodePrefix::default_instance_,
      GCodePrefix_offsets_,
      -1,
      -1,
      -1,
      sizeof(GCodePrefix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodePrefix, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodePrefix, _is_default_instance_));
  SlicingFinished_descriptor_ = file->message_type(16);
  static const int SlicingFinished_offsets_[1] = {
  };
  SlicingFinished_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlicingFinished_descriptor_,
      SlicingFinished::default_instance_,
      SlicingFinished_offsets_,
      -1,
      -1,
      -1,
      sizeof(SlicingFinished),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicingFinished, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicingFinished, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Cura_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectList_descriptor_, &ObjectList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Slice_descriptor_, &Slice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extruder_descriptor_, &Extruder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Progress_descriptor_, &Progress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Layer_descriptor_, &Layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayerOptimized_descriptor_, &LayerOptimized::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathSegment_descriptor_, &PathSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCodeLayer_descriptor_, &GCodeLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrintTimeMaterialEstimates_descriptor_, &PrintTimeMaterialEstimates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaterialEstimates_descriptor_, &MaterialEstimates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SettingList_descriptor_, &SettingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Setting_descriptor_, &Setting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SettingExtruder_descriptor_, &SettingExtruder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCodePrefix_descriptor_, &GCodePrefix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlicingFinished_descriptor_, &SlicingFinished::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Cura_2eproto() {
  delete ObjectList::default_instance_;
  delete ObjectList_reflection_;
  delete Slice::default_instance_;
  delete Slice_reflection_;
  delete Extruder::default_instance_;
  delete Extruder_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete Progress::default_instance_;
  delete Progress_reflection_;
  delete Layer::default_instance_;
  delete Layer_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete LayerOptimized::default_instance_;
  delete LayerOptimized_reflection_;
  delete PathSegment::default_instance_;
  delete PathSegment_reflection_;
  delete GCodeLayer::default_instance_;
  delete GCodeLayer_reflection_;
  delete PrintTimeMaterialEstimates::default_instance_;
  delete PrintTimeMaterialEstimates_reflection_;
  delete MaterialEstimates::default_instance_;
  delete MaterialEstimates_reflection_;
  delete SettingList::default_instance_;
  delete SettingList_reflection_;
  delete Setting::default_instance_;
  delete Setting_reflection_;
  delete SettingExtruder::default_instance_;
  delete SettingExtruder_reflection_;
  delete GCodePrefix::default_instance_;
  delete GCodePrefix_reflection_;
  delete SlicingFinished::default_instance_;
  delete SlicingFinished_reflection_;
}

void protobuf_AddDesc_Cura_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Cura_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nCura.proto\022\ncura.proto\"X\n\nObjectList\022#"
    "\n\007objects\030\001 \003(\0132\022.cura.proto.Object\022%\n\010s"
    "ettings\030\002 \003(\0132\023.cura.proto.Setting\"\310\001\n\005S"
    "lice\022,\n\014object_lists\030\001 \003(\0132\026.cura.proto."
    "ObjectList\0220\n\017global_settings\030\002 \001(\0132\027.cu"
    "ra.proto.SettingList\022\'\n\textruders\030\003 \003(\0132"
    "\024.cura.proto.Extruder\0226\n\021limit_to_extrud"
    "er\030\004 \003(\0132\033.cura.proto.SettingExtruder\"A\n"
    "\010Extruder\022\n\n\002id\030\001 \001(\005\022)\n\010settings\030\002 \001(\0132"
    "\027.cura.proto.SettingList\"}\n\006Object\022\n\n\002id"
    "\030\001 \001(\003\022\020\n\010vertices\030\002 \001(\014\022\017\n\007normals\030\003 \001("
    "\014\022\017\n\007indices\030\004 \001(\014\022%\n\010settings\030\005 \003(\0132\023.c"
    "ura.proto.Setting\022\014\n\004name\030\006 \001(\t\"\032\n\010Progr"
    "ess\022\016\n\006amount\030\001 \001(\002\"]\n\005Layer\022\n\n\002id\030\001 \001(\005"
    "\022\016\n\006height\030\002 \001(\002\022\021\n\tthickness\030\003 \001(\002\022%\n\010p"
    "olygons\030\004 \003(\0132\023.cura.proto.Polygon\"\353\002\n\007P"
    "olygon\022&\n\004type\030\001 \001(\0162\030.cura.proto.Polygo"
    "n.Type\022\016\n\006points\030\002 \001(\014\022\022\n\nline_width\030\003 \001"
    "(\002\022\026\n\016line_thickness\030\004 \001(\002\022\025\n\rline_feedr"
    "ate\030\005 \001(\002\"\344\001\n\004Type\022\014\n\010NoneType\020\000\022\016\n\nInse"
    "t0Type\020\001\022\016\n\nInsetXType\020\002\022\014\n\010SkinType\020\003\022\017"
    "\n\013SupportType\020\004\022\r\n\tSkirtType\020\005\022\016\n\nInfill"
    "Type\020\006\022\025\n\021SupportInfillType\020\007\022\023\n\017MoveCom"
    "bingType\020\010\022\026\n\022MoveRetractionType\020\t\022\030\n\024Su"
    "pportInterfaceType\020\n\022\022\n\016PrimeTowerType\020\013"
    "\"n\n\016LayerOptimized\022\n\n\002id\030\001 \001(\005\022\016\n\006height"
    "\030\002 \001(\002\022\021\n\tthickness\030\003 \001(\002\022-\n\014path_segmen"
    "t\030\004 \003(\0132\027.cura.proto.PathSegment\"\343\001\n\013Pat"
    "hSegment\022\020\n\010extruder\030\001 \001(\005\0225\n\npoint_type"
    "\030\002 \001(\0162!.cura.proto.PathSegment.PointTyp"
    "e\022\016\n\006points\030\003 \001(\014\022\021\n\tline_type\030\004 \001(\014\022\022\n\n"
    "line_width\030\005 \001(\014\022\026\n\016line_thickness\030\006 \001(\014"
    "\022\025\n\rline_feedrate\030\007 \001(\014\"%\n\tPointType\022\013\n\007"
    "Point2D\020\000\022\013\n\007Point3D\020\001\"\032\n\nGCodeLayer\022\014\n\004"
    "data\030\002 \001(\014\"\351\002\n\032PrintTimeMaterialEstimate"
    "s\022\021\n\ttime_none\030\001 \001(\002\022\024\n\014time_inset_0\030\002 \001"
    "(\002\022\024\n\014time_inset_x\030\003 \001(\002\022\021\n\ttime_skin\030\004 "
    "\001(\002\022\024\n\014time_support\030\005 \001(\002\022\022\n\ntime_skirt\030"
    "\006 \001(\002\022\023\n\013time_infill\030\007 \001(\002\022\033\n\023time_suppo"
    "rt_infill\030\010 \001(\002\022\023\n\013time_travel\030\t \001(\002\022\024\n\014"
    "time_retract\030\n \001(\002\022\036\n\026time_support_inter"
    "face\030\013 \001(\002\022\030\n\020time_prime_tower\030\014 \001(\002\0228\n\021"
    "materialEstimates\030\r \003(\0132\035.cura.proto.Mat"
    "erialEstimates\"8\n\021MaterialEstimates\022\n\n\002i"
    "d\030\001 \001(\003\022\027\n\017material_amount\030\002 \001(\002\"4\n\013Sett"
    "ingList\022%\n\010settings\030\001 \003(\0132\023.cura.proto.S"
    "etting\"&\n\007Setting\022\014\n\004name\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\014\"1\n\017SettingExtruder\022\014\n\004name\030\001 \001(\t\022"
    "\020\n\010extruder\030\002 \001(\005\"\033\n\013GCodePrefix\022\014\n\004data"
    "\030\002 \001(\014\"\021\n\017SlicingFinishedb\006proto3", 1993);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cura.proto", &protobuf_RegisterTypes);
  ObjectList::default_instance_ = new ObjectList();
  Slice::default_instance_ = new Slice();
  Extruder::default_instance_ = new Extruder();
  Object::default_instance_ = new Object();
  Progress::default_instance_ = new Progress();
  Layer::default_instance_ = new Layer();
  Polygon::default_instance_ = new Polygon();
  LayerOptimized::default_instance_ = new LayerOptimized();
  PathSegment::default_instance_ = new PathSegment();
  GCodeLayer::default_instance_ = new GCodeLayer();
  PrintTimeMaterialEstimates::default_instance_ = new PrintTimeMaterialEstimates();
  MaterialEstimates::default_instance_ = new MaterialEstimates();
  SettingList::default_instance_ = new SettingList();
  Setting::default_instance_ = new Setting();
  SettingExtruder::default_instance_ = new SettingExtruder();
  GCodePrefix::default_instance_ = new GCodePrefix();
  SlicingFinished::default_instance_ = new SlicingFinished();
  ObjectList::default_instance_->InitAsDefaultInstance();
  Slice::default_instance_->InitAsDefaultInstance();
  Extruder::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  Progress::default_instance_->InitAsDefaultInstance();
  Layer::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  LayerOptimized::default_instance_->InitAsDefaultInstance();
  PathSegment::default_instance_->InitAsDefaultInstance();
  GCodeLayer::default_instance_->InitAsDefaultInstance();
  PrintTimeMaterialEstimates::default_instance_->InitAsDefaultInstance();
  MaterialEstimates::default_instance_->InitAsDefaultInstance();
  SettingList::default_instance_->InitAsDefaultInstance();
  Setting::default_instance_->InitAsDefaultInstance();
  SettingExtruder::default_instance_->InitAsDefaultInstance();
  GCodePrefix::default_instance_->InitAsDefaultInstance();
  SlicingFinished::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Cura_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Cura_2eproto {
  StaticDescriptorInitializer_Cura_2eproto() {
    protobuf_AddDesc_Cura_2eproto();
  }
} static_descriptor_initializer_Cura_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectList::kObjectsFieldNumber;
const int ObjectList::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectList::ObjectList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.ObjectList)
}

void ObjectList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ObjectList::ObjectList(const ObjectList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.ObjectList)
}

void ObjectList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:cura.proto.ObjectList)
  SharedDtor();
}

void ObjectList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectList_descriptor_;
}

const ObjectList& ObjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

ObjectList* ObjectList::default_instance_ = NULL;

ObjectList* ObjectList::New(::google::protobuf::Arena* arena) const {
  ObjectList* n = new ObjectList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.ObjectList)
  objects_.Clear();
  settings_.Clear();
}

bool ObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.ObjectList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.Object objects = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_objects;
        if (input->ExpectTag(18)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .cura.proto.Setting settings = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.ObjectList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.ObjectList)
  return false;
#undef DO_
}

void ObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.ObjectList)
  // repeated .cura.proto.Object objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // repeated .cura.proto.Setting settings = 2;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.ObjectList)
}

::google::protobuf::uint8* ObjectList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.ObjectList)
  // repeated .cura.proto.Object objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->objects(i), false, target);
  }

  // repeated .cura.proto.Setting settings = 2;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->settings(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.ObjectList)
  return target;
}

int ObjectList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.ObjectList)
  int total_size = 0;

  // repeated .cura.proto.Object objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  // repeated .cura.proto.Setting settings = 2;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.ObjectList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObjectList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.ObjectList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.ObjectList)
    MergeFrom(*source);
  }
}

void ObjectList::MergeFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.ObjectList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  objects_.MergeFrom(from.objects_);
  settings_.MergeFrom(from.settings_);
}

void ObjectList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectList::CopyFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {

  return true;
}

void ObjectList::Swap(ObjectList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectList::InternalSwap(ObjectList* other) {
  objects_.UnsafeArenaSwap(&other->objects_);
  settings_.UnsafeArenaSwap(&other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectList_descriptor_;
  metadata.reflection = ObjectList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectList

// repeated .cura.proto.Object objects = 1;
int ObjectList::objects_size() const {
  return objects_.size();
}
void ObjectList::clear_objects() {
  objects_.Clear();
}
const ::cura::proto::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.objects)
  return objects_.Get(index);
}
::cura::proto::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.objects)
  return objects_.Mutable(index);
}
::cura::proto::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.objects)
  return objects_;
}

// repeated .cura.proto.Setting settings = 2;
int ObjectList::settings_size() const {
  return settings_.size();
}
void ObjectList::clear_settings() {
  settings_.Clear();
}
const ::cura::proto::Setting& ObjectList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.settings)
  return settings_.Get(index);
}
::cura::proto::Setting* ObjectList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.settings)
  return settings_.Mutable(index);
}
::cura::proto::Setting* ObjectList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
ObjectList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
ObjectList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.settings)
  return settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Slice::kObjectListsFieldNumber;
const int Slice::kGlobalSettingsFieldNumber;
const int Slice::kExtrudersFieldNumber;
const int Slice::kLimitToExtruderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Slice::Slice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Slice)
}

void Slice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  global_settings_ = const_cast< ::cura::proto::SettingList*>(&::cura::proto::SettingList::default_instance());
}

Slice::Slice(const Slice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Slice)
}

void Slice::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  global_settings_ = NULL;
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:cura.proto.Slice)
  SharedDtor();
}

void Slice::SharedDtor() {
  if (this != default_instance_) {
    delete global_settings_;
  }
}

void Slice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slice_descriptor_;
}

const Slice& Slice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Slice* Slice::default_instance_ = NULL;

Slice* Slice::New(::google::protobuf::Arena* arena) const {
  Slice* n = new Slice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Slice)
  if (GetArenaNoVirtual() == NULL && global_settings_ != NULL) delete global_settings_;
  global_settings_ = NULL;
  object_lists_.Clear();
  extruders_.Clear();
  limit_to_extruder_.Clear();
}

bool Slice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Slice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.ObjectList object_lists = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_lists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_object_lists;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_global_settings;
        break;
      }

      // optional .cura.proto.SettingList global_settings = 2;
      case 2: {
        if (tag == 18) {
         parse_global_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extruders;
        break;
      }

      // repeated .cura.proto.Extruder extruders = 3;
      case 3: {
        if (tag == 26) {
         parse_extruders:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extruders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extruders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_extruders;
        if (input->ExpectTag(34)) goto parse_loop_limit_to_extruder;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_limit_to_extruder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_limit_to_extruder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_limit_to_extruder;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Slice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Slice)
  return false;
#undef DO_
}

void Slice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Slice)
  // repeated .cura.proto.ObjectList object_lists = 1;
  for (unsigned int i = 0, n = this->object_lists_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_lists(i), output);
  }

  // optional .cura.proto.SettingList global_settings = 2;
  if (this->has_global_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->global_settings_, output);
  }

  // repeated .cura.proto.Extruder extruders = 3;
  for (unsigned int i = 0, n = this->extruders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extruders(i), output);
  }

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  for (unsigned int i = 0, n = this->limit_to_extruder_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->limit_to_extruder(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Slice)
}

::google::protobuf::uint8* Slice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Slice)
  // repeated .cura.proto.ObjectList object_lists = 1;
  for (unsigned int i = 0, n = this->object_lists_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->object_lists(i), false, target);
  }

  // optional .cura.proto.SettingList global_settings = 2;
  if (this->has_global_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->global_settings_, false, target);
  }

  // repeated .cura.proto.Extruder extruders = 3;
  for (unsigned int i = 0, n = this->extruders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->extruders(i), false, target);
  }

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  for (unsigned int i = 0, n = this->limit_to_extruder_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->limit_to_extruder(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Slice)
  return target;
}

int Slice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Slice)
  int total_size = 0;

  // optional .cura.proto.SettingList global_settings = 2;
  if (this->has_global_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->global_settings_);
  }

  // repeated .cura.proto.ObjectList object_lists = 1;
  total_size += 1 * this->object_lists_size();
  for (int i = 0; i < this->object_lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_lists(i));
  }

  // repeated .cura.proto.Extruder extruders = 3;
  total_size += 1 * this->extruders_size();
  for (int i = 0; i < this->extruders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extruders(i));
  }

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  total_size += 1 * this->limit_to_extruder_size();
  for (int i = 0; i < this->limit_to_extruder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit_to_extruder(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Slice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Slice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Slice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Slice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Slice)
    MergeFrom(*source);
  }
}

void Slice::MergeFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Slice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_lists_.MergeFrom(from.object_lists_);
  extruders_.MergeFrom(from.extruders_);
  limit_to_extruder_.MergeFrom(from.limit_to_extruder_);
  if (from.has_global_settings()) {
    mutable_global_settings()->::cura::proto::SettingList::MergeFrom(from.global_settings());
  }
}

void Slice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {

  return true;
}

void Slice::Swap(Slice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slice::InternalSwap(Slice* other) {
  object_lists_.UnsafeArenaSwap(&other->object_lists_);
  std::swap(global_settings_, other->global_settings_);
  extruders_.UnsafeArenaSwap(&other->extruders_);
  limit_to_extruder_.UnsafeArenaSwap(&other->limit_to_extruder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slice_descriptor_;
  metadata.reflection = Slice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slice

// repeated .cura.proto.ObjectList object_lists = 1;
int Slice::object_lists_size() const {
  return object_lists_.size();
}
void Slice::clear_object_lists() {
  object_lists_.Clear();
}
const ::cura::proto::ObjectList& Slice::object_lists(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.object_lists)
  return object_lists_.Get(index);
}
::cura::proto::ObjectList* Slice::mutable_object_lists(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.object_lists)
  return object_lists_.Mutable(index);
}
::cura::proto::ObjectList* Slice::add_object_lists() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.object_lists)
  return object_lists_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >*
Slice::mutable_object_lists() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.object_lists)
  return &object_lists_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >&
Slice::object_lists() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.object_lists)
  return object_lists_;
}

// optional .cura.proto.SettingList global_settings = 2;
bool Slice::has_global_settings() const {
  return !_is_default_instance_ && global_settings_ != NULL;
}
void Slice::clear_global_settings() {
  if (GetArenaNoVirtual() == NULL && global_settings_ != NULL) delete global_settings_;
  global_settings_ = NULL;
}
const ::cura::proto::SettingList& Slice::global_settings() const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.global_settings)
  return global_settings_ != NULL ? *global_settings_ : *default_instance_->global_settings_;
}
::cura::proto::SettingList* Slice::mutable_global_settings() {
  
  if (global_settings_ == NULL) {
    global_settings_ = new ::cura::proto::SettingList;
  }
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.global_settings)
  return global_settings_;
}
::cura::proto::SettingList* Slice::release_global_settings() {
  // @@protoc_insertion_point(field_release:cura.proto.Slice.global_settings)
  
  ::cura::proto::SettingList* temp = global_settings_;
  global_settings_ = NULL;
  return temp;
}
void Slice::set_allocated_global_settings(::cura::proto::SettingList* global_settings) {
  delete global_settings_;
  global_settings_ = global_settings;
  if (global_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Slice.global_settings)
}

// repeated .cura.proto.Extruder extruders = 3;
int Slice::extruders_size() const {
  return extruders_.size();
}
void Slice::clear_extruders() {
  extruders_.Clear();
}
const ::cura::proto::Extruder& Slice::extruders(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.extruders)
  return extruders_.Get(index);
}
::cura::proto::Extruder* Slice::mutable_extruders(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.extruders)
  return extruders_.Mutable(index);
}
::cura::proto::Extruder* Slice::add_extruders() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.extruders)
  return extruders_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder >*
Slice::mutable_extruders() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.extruders)
  return &extruders_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Extruder >&
Slice::extruders() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.extruders)
  return extruders_;
}

// repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
int Slice::limit_to_extruder_size() const {
  return limit_to_extruder_.size();
}
void Slice::clear_limit_to_extruder() {
  limit_to_extruder_.Clear();
}
const ::cura::proto::SettingExtruder& Slice::limit_to_extruder(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Get(index);
}
::cura::proto::SettingExtruder* Slice::mutable_limit_to_extruder(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Mutable(index);
}
::cura::proto::SettingExtruder* Slice::add_limit_to_extruder() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder >*
Slice::mutable_limit_to_extruder() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.limit_to_extruder)
  return &limit_to_extruder_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::SettingExtruder >&
Slice::limit_to_extruder() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extruder::kIdFieldNumber;
const int Extruder::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extruder::Extruder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Extruder)
}

void Extruder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  settings_ = const_cast< ::cura::proto::SettingList*>(&::cura::proto::SettingList::default_instance());
}

Extruder::Extruder(const Extruder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Extruder)
}

void Extruder::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  settings_ = NULL;
}

Extruder::~Extruder() {
  // @@protoc_insertion_point(destructor:cura.proto.Extruder)
  SharedDtor();
}

void Extruder::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Extruder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extruder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extruder_descriptor_;
}

const Extruder& Extruder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Extruder* Extruder::default_instance_ = NULL;

Extruder* Extruder::New(::google::protobuf::Arena* arena) const {
  Extruder* n = new Extruder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extruder::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Extruder)
  id_ = 0;
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) delete settings_;
  settings_ = NULL;
}

bool Extruder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Extruder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_settings;
        break;
      }

      // optional .cura.proto.SettingList settings = 2;
      case 2: {
        if (tag == 18) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Extruder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Extruder)
  return false;
#undef DO_
}

void Extruder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Extruder)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .cura.proto.SettingList settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->settings_, output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Extruder)
}

::google::protobuf::uint8* Extruder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Extruder)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .cura.proto.SettingList settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->settings_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Extruder)
  return target;
}

int Extruder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Extruder)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .cura.proto.SettingList settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->settings_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extruder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Extruder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Extruder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Extruder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Extruder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Extruder)
    MergeFrom(*source);
  }
}

void Extruder::MergeFrom(const Extruder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Extruder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_settings()) {
    mutable_settings()->::cura::proto::SettingList::MergeFrom(from.settings());
  }
}

void Extruder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Extruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extruder::CopyFrom(const Extruder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Extruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extruder::IsInitialized() const {

  return true;
}

void Extruder::Swap(Extruder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extruder::InternalSwap(Extruder* other) {
  std::swap(id_, other->id_);
  std::swap(settings_, other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extruder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extruder_descriptor_;
  metadata.reflection = Extruder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extruder

// optional int32 id = 1;
void Extruder::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Extruder::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Extruder.id)
  return id_;
}
 void Extruder::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Extruder.id)
}

// optional .cura.proto.SettingList settings = 2;
bool Extruder::has_settings() const {
  return !_is_default_instance_ && settings_ != NULL;
}
void Extruder::clear_settings() {
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) delete settings_;
  settings_ = NULL;
}
const ::cura::proto::SettingList& Extruder::settings() const {
  // @@protoc_insertion_point(field_get:cura.proto.Extruder.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
::cura::proto::SettingList* Extruder::mutable_settings() {
  
  if (settings_ == NULL) {
    settings_ = new ::cura::proto::SettingList;
  }
  // @@protoc_insertion_point(field_mutable:cura.proto.Extruder.settings)
  return settings_;
}
::cura::proto::SettingList* Extruder::release_settings() {
  // @@protoc_insertion_point(field_release:cura.proto.Extruder.settings)
  
  ::cura::proto::SettingList* temp = settings_;
  settings_ = NULL;
  return temp;
}
void Extruder::set_allocated_settings(::cura::proto::SettingList* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Extruder.settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kIdFieldNumber;
const int Object::kVerticesFieldNumber;
const int Object::kNormalsFieldNumber;
const int Object::kIndicesFieldNumber;
const int Object::kSettingsFieldNumber;
const int Object::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Object)
}

void Object::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Object::Object(const Object& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Object)
}

void Object::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  vertices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:cura.proto.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  vertices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Object)
  id_ = GOOGLE_LONGLONG(0);
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // optional bytes vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normals;
        break;
      }

      // optional bytes normals = 3;
      case 3: {
        if (tag == 26) {
         parse_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_indices;
        break;
      }

      // optional bytes indices = 4;
      case 4: {
        if (tag == 34) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_settings;
        break;
      }

      // repeated .cura.proto.Setting settings = 5;
      case 5: {
        if (tag == 42) {
         parse_settings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cura.proto.Object.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Object)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes vertices = 2;
  if (this->vertices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vertices(), output);
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->normals(), output);
  }

  // optional bytes indices = 4;
  if (this->indices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->indices(), output);
  }

  // repeated .cura.proto.Setting settings = 5;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->settings(i), output);
  }

  // optional string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Object.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Object)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes vertices = 2;
  if (this->vertices().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vertices(), target);
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->normals(), target);
  }

  // optional bytes indices = 4;
  if (this->indices().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->indices(), target);
  }

  // repeated .cura.proto.Setting settings = 5;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->settings(i), false, target);
  }

  // optional string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Object.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Object)
  return target;
}

int Object::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Object)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bytes vertices = 2;
  if (this->vertices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->vertices());
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->normals());
  }

  // optional bytes indices = 4;
  if (this->indices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->indices());
  }

  // optional string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .cura.proto.Setting settings = 5;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Object)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Object* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Object)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  settings_.MergeFrom(from.settings_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.vertices().size() > 0) {

    vertices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertices_);
  }
  if (from.normals().size() > 0) {

    normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_);
  }
  if (from.indices().size() > 0) {

    indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indices_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  std::swap(id_, other->id_);
  vertices_.Swap(&other->vertices_);
  normals_.Swap(&other->normals_);
  indices_.Swap(&other->indices_);
  settings_.UnsafeArenaSwap(&other->settings_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// optional int64 id = 1;
void Object::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.id)
  return id_;
}
 void Object::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Object.id)
}

// optional bytes vertices = 2;
void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.vertices)
  return vertices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_vertices(const ::std::string& value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.vertices)
}
 void Object::set_vertices(const char* value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.vertices)
}
 void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.vertices)
}
 ::std::string* Object::mutable_vertices() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_vertices() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.vertices)
  
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.vertices)
}

// optional bytes normals = 3;
void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.normals)
}
 void Object::set_normals(const char* value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.normals)
}
 void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.normals)
}
 ::std::string* Object::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_normals() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.normals)
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.normals)
}

// optional bytes indices = 4;
void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.indices)
}
 void Object::set_indices(const char* value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.indices)
}
 void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.indices)
}
 ::std::string* Object::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_indices() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.indices)
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.indices)
}

// repeated .cura.proto.Setting settings = 5;
int Object::settings_size() const {
  return settings_.size();
}
void Object::clear_settings() {
  settings_.Clear();
}
const ::cura::proto::Setting& Object::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.settings)
  return settings_.Get(index);
}
::cura::proto::Setting* Object::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.settings)
  return settings_.Mutable(index);
}
::cura::proto::Setting* Object::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.Object.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
Object::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Object.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
Object::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.Object.settings)
  return settings_;
}

// optional string name = 6;
void Object::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.name)
}
 void Object::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.name)
}
 void Object::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.name)
}
 ::std::string* Object::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Progress::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Progress::Progress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Progress)
}

void Progress::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Progress::Progress(const Progress& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Progress)
}

void Progress::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  amount_ = 0;
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:cura.proto.Progress)
  SharedDtor();
}

void Progress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Progress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Progress_descriptor_;
}

const Progress& Progress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Progress* Progress::default_instance_ = NULL;

Progress* Progress::New(::google::protobuf::Arena* arena) const {
  Progress* n = new Progress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Progress)
  amount_ = 0;
}

bool Progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Progress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Progress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Progress)
  return false;
#undef DO_
}

void Progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Progress)
  // optional float amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Progress)
}

::google::protobuf::uint8* Progress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Progress)
  // optional float amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Progress)
  return target;
}

int Progress::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Progress)
  int total_size = 0;

  // optional float amount = 1;
  if (this->amount() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Progress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Progress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Progress* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Progress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Progress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Progress)
    MergeFrom(*source);
  }
}

void Progress::MergeFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Progress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void Progress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {

  return true;
}

void Progress::Swap(Progress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Progress::InternalSwap(Progress* other) {
  std::swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Progress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Progress_descriptor_;
  metadata.reflection = Progress_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Progress

// optional float amount = 1;
void Progress::clear_amount() {
  amount_ = 0;
}
 float Progress::amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.Progress.amount)
  return amount_;
}
 void Progress::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Progress.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layer::kIdFieldNumber;
const int Layer::kHeightFieldNumber;
const int Layer::kThicknessFieldNumber;
const int Layer::kPolygonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layer::Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Layer)
}

void Layer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Layer)
}

void Layer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  height_ = 0;
  thickness_ = 0;
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:cura.proto.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New(::google::protobuf::Arena* arena) const {
  Layer* n = new Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Layer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Layer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Layer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, height_);
  thickness_ = 0;

#undef ZR_HELPER_
#undef ZR_

  polygons_.Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_thickness;
        break;
      }

      // optional float thickness = 3;
      case 3: {
        if (tag == 29) {
         parse_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_polygons;
        break;
      }

      // repeated .cura.proto.Polygon polygons = 4;
      case 4: {
        if (tag == 34) {
         parse_polygons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_polygons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Layer)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->thickness(), output);
  }

  // repeated .cura.proto.Polygon polygons = 4;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->polygons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Layer)
}

::google::protobuf::uint8* Layer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Layer)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->thickness(), target);
  }

  // repeated .cura.proto.Polygon polygons = 4;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->polygons(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Layer)
  return target;
}

int Layer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Layer)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    total_size += 1 + 4;
  }

  // repeated .cura.proto.Polygon polygons = 4;
  total_size += 1 * this->polygons_size();
  for (int i = 0; i < this->polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Layer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Layer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Layer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Layer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygons_.MergeFrom(from.polygons_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.thickness() != 0) {
    set_thickness(from.thickness());
  }
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {

  return true;
}

void Layer::Swap(Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layer::InternalSwap(Layer* other) {
  std::swap(id_, other->id_);
  std::swap(height_, other->height_);
  std::swap(thickness_, other->thickness_);
  polygons_.UnsafeArenaSwap(&other->polygons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layer

// optional int32 id = 1;
void Layer::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Layer::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.id)
  return id_;
}
 void Layer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.id)
}

// optional float height = 2;
void Layer::clear_height() {
  height_ = 0;
}
 float Layer::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.height)
  return height_;
}
 void Layer::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.height)
}

// optional float thickness = 3;
void Layer::clear_thickness() {
  thickness_ = 0;
}
 float Layer::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.thickness)
  return thickness_;
}
 void Layer::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.thickness)
}

// repeated .cura.proto.Polygon polygons = 4;
int Layer::polygons_size() const {
  return polygons_.size();
}
void Layer::clear_polygons() {
  polygons_.Clear();
}
const ::cura::proto::Polygon& Layer::polygons(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.polygons)
  return polygons_.Get(index);
}
::cura::proto::Polygon* Layer::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Layer.polygons)
  return polygons_.Mutable(index);
}
::cura::proto::Polygon* Layer::add_polygons() {
  // @@protoc_insertion_point(field_add:cura.proto.Layer.polygons)
  return polygons_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >*
Layer::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Layer.polygons)
  return &polygons_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >&
Layer::polygons() const {
  // @@protoc_insertion_point(field_list:cura.proto.Layer.polygons)
  return polygons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_Type_descriptor_;
}
bool Polygon_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Polygon_Type Polygon::NoneType;
const Polygon_Type Polygon::Inset0Type;
const Polygon_Type Polygon::InsetXType;
const Polygon_Type Polygon::SkinType;
const Polygon_Type Polygon::SupportType;
const Polygon_Type Polygon::SkirtType;
const Polygon_Type Polygon::InfillType;
const Polygon_Type Polygon::SupportInfillType;
const Polygon_Type Polygon::MoveCombingType;
const Polygon_Type Polygon::MoveRetractionType;
const Polygon_Type Polygon::SupportInterfaceType;
const Polygon_Type Polygon::PrimeTowerType;
const Polygon_Type Polygon::Type_MIN;
const Polygon_Type Polygon::Type_MAX;
const int Polygon::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kTypeFieldNumber;
const int Polygon::kPointsFieldNumber;
const int Polygon::kLineWidthFieldNumber;
const int Polygon::kLineThicknessFieldNumber;
const int Polygon::kLineFeedrateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Polygon)
}

void Polygon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Polygon)
}

void Polygon::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  points_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_ = 0;
  line_thickness_ = 0;
  line_feedrate_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:cura.proto.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  points_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Polygon)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Polygon, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Polygon*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, line_feedrate_);
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cura.proto.Polygon.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cura::proto::Polygon_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // optional bytes points = 2;
      case 2: {
        if (tag == 18) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_line_width;
        break;
      }

      // optional float line_width = 3;
      case 3: {
        if (tag == 29) {
         parse_line_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_line_thickness;
        break;
      }

      // optional float line_thickness = 4;
      case 4: {
        if (tag == 37) {
         parse_line_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_line_feedrate;
        break;
      }

      // optional float line_feedrate = 5;
      case 5: {
        if (tag == 45) {
         parse_line_feedrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_feedrate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Polygon)
  // optional .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes points = 2;
  if (this->points().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->points(), output);
  }

  // optional float line_width = 3;
  if (this->line_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->line_width(), output);
  }

  // optional float line_thickness = 4;
  if (this->line_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->line_thickness(), output);
  }

  // optional float line_feedrate = 5;
  if (this->line_feedrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->line_feedrate(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Polygon)
  // optional .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes points = 2;
  if (this->points().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->points(), target);
  }

  // optional float line_width = 3;
  if (this->line_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->line_width(), target);
  }

  // optional float line_thickness = 4;
  if (this->line_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->line_thickness(), target);
  }

  // optional float line_feedrate = 5;
  if (this->line_feedrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->line_feedrate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Polygon)
  return target;
}

int Polygon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Polygon)
  int total_size = 0;

  // optional .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes points = 2;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->points());
  }

  // optional float line_width = 3;
  if (this->line_width() != 0) {
    total_size += 1 + 4;
  }

  // optional float line_thickness = 4;
  if (this->line_thickness() != 0) {
    total_size += 1 + 4;
  }

  // optional float line_feedrate = 5;
  if (this->line_feedrate() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Polygon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.line_width() != 0) {
    set_line_width(from.line_width());
  }
  if (from.line_thickness() != 0) {
    set_line_thickness(from.line_thickness());
  }
  if (from.line_feedrate() != 0) {
    set_line_feedrate(from.line_feedrate());
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  std::swap(type_, other->type_);
  points_.Swap(&other->points_);
  std::swap(line_width_, other->line_width_);
  std::swap(line_thickness_, other->line_thickness_);
  std::swap(line_feedrate_, other->line_feedrate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// optional .cura.proto.Polygon.Type type = 1;
void Polygon::clear_type() {
  type_ = 0;
}
 ::cura::proto::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.type)
  return static_cast< ::cura::proto::Polygon_Type >(type_);
}
 void Polygon::set_type(::cura::proto::Polygon_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.type)
}

// optional bytes points = 2;
void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.points)
  return points_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Polygon::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.points)
}
 void Polygon::set_points(const char* value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Polygon.points)
}
 void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Polygon.points)
}
 ::std::string* Polygon::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Polygon.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Polygon::release_points() {
  // @@protoc_insertion_point(field_release:cura.proto.Polygon.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Polygon::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Polygon.points)
}

// optional float line_width = 3;
void Polygon::clear_line_width() {
  line_width_ = 0;
}
 float Polygon::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_width)
  return line_width_;
}
 void Polygon::set_line_width(float value) {
  
  line_width_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_width)
}

// optional float line_thickness = 4;
void Polygon::clear_line_thickness() {
  line_thickness_ = 0;
}
 float Polygon::line_thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_thickness)
  return line_thickness_;
}
 void Polygon::set_line_thickness(float value) {
  
  line_thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_thickness)
}

// optional float line_feedrate = 5;
void Polygon::clear_line_feedrate() {
  line_feedrate_ = 0;
}
 float Polygon::line_feedrate() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_feedrate)
  return line_feedrate_;
}
 void Polygon::set_line_feedrate(float value) {
  
  line_feedrate_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_feedrate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerOptimized::kIdFieldNumber;
const int LayerOptimized::kHeightFieldNumber;
const int LayerOptimized::kThicknessFieldNumber;
const int LayerOptimized::kPathSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerOptimized::LayerOptimized()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.LayerOptimized)
}

void LayerOptimized::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LayerOptimized::LayerOptimized(const LayerOptimized& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.LayerOptimized)
}

void LayerOptimized::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  height_ = 0;
  thickness_ = 0;
}

LayerOptimized::~LayerOptimized() {
  // @@protoc_insertion_point(destructor:cura.proto.LayerOptimized)
  SharedDtor();
}

void LayerOptimized::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LayerOptimized::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerOptimized::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerOptimized_descriptor_;
}

const LayerOptimized& LayerOptimized::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

LayerOptimized* LayerOptimized::default_instance_ = NULL;

LayerOptimized* LayerOptimized::New(::google::protobuf::Arena* arena) const {
  LayerOptimized* n = new LayerOptimized;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerOptimized::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.LayerOptimized)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LayerOptimized, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LayerOptimized*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, height_);
  thickness_ = 0;

#undef ZR_HELPER_
#undef ZR_

  path_segment_.Clear();
}

bool LayerOptimized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.LayerOptimized)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_thickness;
        break;
      }

      // optional float thickness = 3;
      case 3: {
        if (tag == 29) {
         parse_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_path_segment;
        break;
      }

      // repeated .cura.proto.PathSegment path_segment = 4;
      case 4: {
        if (tag == 34) {
         parse_path_segment:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_path_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.LayerOptimized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.LayerOptimized)
  return false;
#undef DO_
}

void LayerOptimized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.LayerOptimized)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->thickness(), output);
  }

  // repeated .cura.proto.PathSegment path_segment = 4;
  for (unsigned int i = 0, n = this->path_segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->path_segment(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.LayerOptimized)
}

::google::protobuf::uint8* LayerOptimized::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.LayerOptimized)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->thickness(), target);
  }

  // repeated .cura.proto.PathSegment path_segment = 4;
  for (unsigned int i = 0, n = this->path_segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->path_segment(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.LayerOptimized)
  return target;
}

int LayerOptimized::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.LayerOptimized)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    total_size += 1 + 4;
  }

  // repeated .cura.proto.PathSegment path_segment = 4;
  total_size += 1 * this->path_segment_size();
  for (int i = 0; i < this->path_segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_segment(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerOptimized::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.LayerOptimized)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LayerOptimized* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerOptimized>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.LayerOptimized)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.LayerOptimized)
    MergeFrom(*source);
  }
}

void LayerOptimized::MergeFrom(const LayerOptimized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.LayerOptimized)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  path_segment_.MergeFrom(from.path_segment_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.thickness() != 0) {
    set_thickness(from.thickness());
  }
}

void LayerOptimized::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.LayerOptimized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerOptimized::CopyFrom(const LayerOptimized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.LayerOptimized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerOptimized::IsInitialized() const {

  return true;
}

void LayerOptimized::Swap(LayerOptimized* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerOptimized::InternalSwap(LayerOptimized* other) {
  std::swap(id_, other->id_);
  std::swap(height_, other->height_);
  std::swap(thickness_, other->thickness_);
  path_segment_.UnsafeArenaSwap(&other->path_segment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerOptimized::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerOptimized_descriptor_;
  metadata.reflection = LayerOptimized_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerOptimized

// optional int32 id = 1;
void LayerOptimized::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 LayerOptimized::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.id)
  return id_;
}
 void LayerOptimized::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.id)
}

// optional float height = 2;
void LayerOptimized::clear_height() {
  height_ = 0;
}
 float LayerOptimized::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.height)
  return height_;
}
 void LayerOptimized::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.height)
}

// optional float thickness = 3;
void LayerOptimized::clear_thickness() {
  thickness_ = 0;
}
 float LayerOptimized::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.thickness)
  return thickness_;
}
 void LayerOptimized::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.thickness)
}

// repeated .cura.proto.PathSegment path_segment = 4;
int LayerOptimized::path_segment_size() const {
  return path_segment_.size();
}
void LayerOptimized::clear_path_segment() {
  path_segment_.Clear();
}
const ::cura::proto::PathSegment& LayerOptimized::path_segment(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Get(index);
}
::cura::proto::PathSegment* LayerOptimized::mutable_path_segment(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Mutable(index);
}
::cura::proto::PathSegment* LayerOptimized::add_path_segment() {
  // @@protoc_insertion_point(field_add:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment >*
LayerOptimized::mutable_path_segment() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.LayerOptimized.path_segment)
  return &path_segment_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::PathSegment >&
LayerOptimized::path_segment() const {
  // @@protoc_insertion_point(field_list:cura.proto.LayerOptimized.path_segment)
  return path_segment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PathSegment_PointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathSegment_PointType_descriptor_;
}
bool PathSegment_PointType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathSegment_PointType PathSegment::Point2D;
const PathSegment_PointType PathSegment::Point3D;
const PathSegment_PointType PathSegment::PointType_MIN;
const PathSegment_PointType PathSegment::PointType_MAX;
const int PathSegment::PointType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathSegment::kExtruderFieldNumber;
const int PathSegment::kPointTypeFieldNumber;
const int PathSegment::kPointsFieldNumber;
const int PathSegment::kLineTypeFieldNumber;
const int PathSegment::kLineWidthFieldNumber;
const int PathSegment::kLineThicknessFieldNumber;
const int PathSegment::kLineFeedrateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathSegment::PathSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.PathSegment)
}

void PathSegment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PathSegment::PathSegment(const PathSegment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.PathSegment)
}

void PathSegment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  extruder_ = 0;
  point_type_ = 0;
  points_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_thickness_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_feedrate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PathSegment::~PathSegment() {
  // @@protoc_insertion_point(destructor:cura.proto.PathSegment)
  SharedDtor();
}

void PathSegment::SharedDtor() {
  points_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_thickness_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_feedrate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PathSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathSegment_descriptor_;
}

const PathSegment& PathSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

PathSegment* PathSegment::default_instance_ = NULL;

PathSegment* PathSegment::New(::google::protobuf::Arena* arena) const {
  PathSegment* n = new PathSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.PathSegment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathSegment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathSegment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(extruder_, point_type_);
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_thickness_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_feedrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PathSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.PathSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 extruder = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extruder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point_type;
        break;
      }

      // optional .cura.proto.PathSegment.PointType point_type = 2;
      case 2: {
        if (tag == 16) {
         parse_point_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_point_type(static_cast< ::cura::proto::PathSegment_PointType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        break;
      }

      // optional bytes points = 3;
      case 3: {
        if (tag == 26) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_line_type;
        break;
      }

      // optional bytes line_type = 4;
      case 4: {
        if (tag == 34) {
         parse_line_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_line_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_line_width;
        break;
      }

      // optional bytes line_width = 5;
      case 5: {
        if (tag == 42) {
         parse_line_width:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_line_width()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_line_thickness;
        break;
      }

      // optional bytes line_thickness = 6;
      case 6: {
        if (tag == 50) {
         parse_line_thickness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_line_thickness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_line_feedrate;
        break;
      }

      // optional bytes line_feedrate = 7;
      case 7: {
        if (tag == 58) {
         parse_line_feedrate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_line_feedrate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.PathSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.PathSegment)
  return false;
#undef DO_
}

void PathSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.PathSegment)
  // optional int32 extruder = 1;
  if (this->extruder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->extruder(), output);
  }

  // optional .cura.proto.PathSegment.PointType point_type = 2;
  if (this->point_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->point_type(), output);
  }

  // optional bytes points = 3;
  if (this->points().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->points(), output);
  }

  // optional bytes line_type = 4;
  if (this->line_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->line_type(), output);
  }

  // optional bytes line_width = 5;
  if (this->line_width().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->line_width(), output);
  }

  // optional bytes line_thickness = 6;
  if (this->line_thickness().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->line_thickness(), output);
  }

  // optional bytes line_feedrate = 7;
  if (this->line_feedrate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->line_feedrate(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.PathSegment)
}

::google::protobuf::uint8* PathSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.PathSegment)
  // optional int32 extruder = 1;
  if (this->extruder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->extruder(), target);
  }

  // optional .cura.proto.PathSegment.PointType point_type = 2;
  if (this->point_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->point_type(), target);
  }

  // optional bytes points = 3;
  if (this->points().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->points(), target);
  }

  // optional bytes line_type = 4;
  if (this->line_type().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->line_type(), target);
  }

  // optional bytes line_width = 5;
  if (this->line_width().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->line_width(), target);
  }

  // optional bytes line_thickness = 6;
  if (this->line_thickness().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->line_thickness(), target);
  }

  // optional bytes line_feedrate = 7;
  if (this->line_feedrate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->line_feedrate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.PathSegment)
  return target;
}

int PathSegment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.PathSegment)
  int total_size = 0;

  // optional int32 extruder = 1;
  if (this->extruder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extruder());
  }

  // optional .cura.proto.PathSegment.PointType point_type = 2;
  if (this->point_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->point_type());
  }

  // optional bytes points = 3;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->points());
  }

  // optional bytes line_type = 4;
  if (this->line_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->line_type());
  }

  // optional bytes line_width = 5;
  if (this->line_width().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->line_width());
  }

  // optional bytes line_thickness = 6;
  if (this->line_thickness().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->line_thickness());
  }

  // optional bytes line_feedrate = 7;
  if (this->line_feedrate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->line_feedrate());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.PathSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathSegment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.PathSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.PathSegment)
    MergeFrom(*source);
  }
}

void PathSegment::MergeFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.PathSegment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.extruder() != 0) {
    set_extruder(from.extruder());
  }
  if (from.point_type() != 0) {
    set_point_type(from.point_type());
  }
  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.line_type().size() > 0) {

    line_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_type_);
  }
  if (from.line_width().size() > 0) {

    line_width_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_width_);
  }
  if (from.line_thickness().size() > 0) {

    line_thickness_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_thickness_);
  }
  if (from.line_feedrate().size() > 0) {

    line_feedrate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_feedrate_);
  }
}

void PathSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSegment::CopyFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSegment::IsInitialized() const {

  return true;
}

void PathSegment::Swap(PathSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathSegment::InternalSwap(PathSegment* other) {
  std::swap(extruder_, other->extruder_);
  std::swap(point_type_, other->point_type_);
  points_.Swap(&other->points_);
  line_type_.Swap(&other->line_type_);
  line_width_.Swap(&other->line_width_);
  line_thickness_.Swap(&other->line_thickness_);
  line_feedrate_.Swap(&other->line_feedrate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathSegment_descriptor_;
  metadata.reflection = PathSegment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathSegment

// optional int32 extruder = 1;
void PathSegment::clear_extruder() {
  extruder_ = 0;
}
 ::google::protobuf::int32 PathSegment::extruder() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.extruder)
  return extruder_;
}
 void PathSegment::set_extruder(::google::protobuf::int32 value) {
  
  extruder_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.extruder)
}

// optional .cura.proto.PathSegment.PointType point_type = 2;
void PathSegment::clear_point_type() {
  point_type_ = 0;
}
 ::cura::proto::PathSegment_PointType PathSegment::point_type() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.point_type)
  return static_cast< ::cura::proto::PathSegment_PointType >(point_type_);
}
 void PathSegment::set_point_type(::cura::proto::PathSegment_PointType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.point_type)
}

// optional bytes points = 3;
void PathSegment::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PathSegment::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.points)
  return points_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.points)
}
 void PathSegment::set_points(const char* value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.points)
}
 void PathSegment::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.points)
}
 ::std::string* PathSegment::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathSegment::release_points() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.points)
}

// optional bytes line_type = 4;
void PathSegment::clear_line_type() {
  line_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PathSegment::line_type() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_type)
  return line_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_line_type(const ::std::string& value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_type)
}
 void PathSegment::set_line_type(const char* value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_type)
}
 void PathSegment::set_line_type(const void* value, size_t size) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_type)
}
 ::std::string* PathSegment::mutable_line_type() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_type)
  return line_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathSegment::release_line_type() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_type)
  
  return line_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_allocated_line_type(::std::string* line_type) {
  if (line_type != NULL) {
    
  } else {
    
  }
  line_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_type);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_type)
}

// optional bytes line_width = 5;
void PathSegment::clear_line_width() {
  line_width_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PathSegment::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_width)
  return line_width_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_line_width(const ::std::string& value) {
  
  line_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_width)
}
 void PathSegment::set_line_width(const char* value) {
  
  line_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_width)
}
 void PathSegment::set_line_width(const void* value, size_t size) {
  
  line_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_width)
}
 ::std::string* PathSegment::mutable_line_width() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_width)
  return line_width_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathSegment::release_line_width() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_width)
  
  return line_width_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_allocated_line_width(::std::string* line_width) {
  if (line_width != NULL) {
    
  } else {
    
  }
  line_width_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_width);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_width)
}

// optional bytes line_thickness = 6;
void PathSegment::clear_line_thickness() {
  line_thickness_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PathSegment::line_thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_thickness)
  return line_thickness_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_line_thickness(const ::std::string& value) {
  
  line_thickness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_thickness)
}
 void PathSegment::set_line_thickness(const char* value) {
  
  line_thickness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_thickness)
}
 void PathSegment::set_line_thickness(const void* value, size_t size) {
  
  line_thickness_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_thickness)
}
 ::std::string* PathSegment::mutable_line_thickness() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_thickness)
  return line_thickness_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathSegment::release_line_thickness() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_thickness)
  
  return line_thickness_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_allocated_line_thickness(::std::string* line_thickness) {
  if (line_thickness != NULL) {
    
  } else {
    
  }
  line_thickness_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_thickness);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_thickness)
}

// optional bytes line_feedrate = 7;
void PathSegment::clear_line_feedrate() {
  line_feedrate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PathSegment::line_feedrate() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_feedrate)
  return line_feedrate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_line_feedrate(const ::std::string& value) {
  
  line_feedrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_feedrate)
}
 void PathSegment::set_line_feedrate(const char* value) {
  
  line_feedrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_feedrate)
}
 void PathSegment::set_line_feedrate(const void* value, size_t size) {
  
  line_feedrate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_feedrate)
}
 ::std::string* PathSegment::mutable_line_feedrate() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_feedrate)
  return line_feedrate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathSegment::release_line_feedrate() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_feedrate)
  
  return line_feedrate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathSegment::set_allocated_line_feedrate(::std::string* line_feedrate) {
  if (line_feedrate != NULL) {
    
  } else {
    
  }
  line_feedrate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_feedrate);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_feedrate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCodeLayer::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCodeLayer::GCodeLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.GCodeLayer)
}

void GCodeLayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GCodeLayer::GCodeLayer(const GCodeLayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.GCodeLayer)
}

void GCodeLayer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GCodeLayer::~GCodeLayer() {
  // @@protoc_insertion_point(destructor:cura.proto.GCodeLayer)
  SharedDtor();
}

void GCodeLayer::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GCodeLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCodeLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCodeLayer_descriptor_;
}

const GCodeLayer& GCodeLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

GCodeLayer* GCodeLayer::default_instance_ = NULL;

GCodeLayer* GCodeLayer::New(::google::protobuf::Arena* arena) const {
  GCodeLayer* n = new GCodeLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCodeLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.GCodeLayer)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GCodeLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.GCodeLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.GCodeLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.GCodeLayer)
  return false;
#undef DO_
}

void GCodeLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.GCodeLayer)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.GCodeLayer)
}

::google::protobuf::uint8* GCodeLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.GCodeLayer)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.GCodeLayer)
  return target;
}

int GCodeLayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.GCodeLayer)
  int total_size = 0;

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCodeLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.GCodeLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GCodeLayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GCodeLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.GCodeLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.GCodeLayer)
    MergeFrom(*source);
  }
}

void GCodeLayer::MergeFrom(const GCodeLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.GCodeLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GCodeLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.GCodeLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCodeLayer::CopyFrom(const GCodeLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.GCodeLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCodeLayer::IsInitialized() const {

  return true;
}

void GCodeLayer::Swap(GCodeLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCodeLayer::InternalSwap(GCodeLayer* other) {
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCodeLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCodeLayer_descriptor_;
  metadata.reflection = GCodeLayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCodeLayer

// optional bytes data = 2;
void GCodeLayer::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GCodeLayer::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodeLayer.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodeLayer::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodeLayer.data)
}
 void GCodeLayer::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodeLayer.data)
}
 void GCodeLayer::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodeLayer.data)
}
 ::std::string* GCodeLayer::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodeLayer.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GCodeLayer::release_data() {
  // @@protoc_insertion_point(field_release:cura.proto.GCodeLayer.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodeLayer::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodeLayer.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintTimeMaterialEstimates::kTimeNoneFieldNumber;
const int PrintTimeMaterialEstimates::kTimeInset0FieldNumber;
const int PrintTimeMaterialEstimates::kTimeInsetXFieldNumber;
const int PrintTimeMaterialEstimates::kTimeSkinFieldNumber;
const int PrintTimeMaterialEstimates::kTimeSupportFieldNumber;
const int PrintTimeMaterialEstimates::kTimeSkirtFieldNumber;
const int PrintTimeMaterialEstimates::kTimeInfillFieldNumber;
const int PrintTimeMaterialEstimates::kTimeSupportInfillFieldNumber;
const int PrintTimeMaterialEstimates::kTimeTravelFieldNumber;
const int PrintTimeMaterialEstimates::kTimeRetractFieldNumber;
const int PrintTimeMaterialEstimates::kTimeSupportInterfaceFieldNumber;
const int PrintTimeMaterialEstimates::kTimePrimeTowerFieldNumber;
const int PrintTimeMaterialEstimates::kMaterialEstimatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintTimeMaterialEstimates::PrintTimeMaterialEstimates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.PrintTimeMaterialEstimates)
}

void PrintTimeMaterialEstimates::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PrintTimeMaterialEstimates::PrintTimeMaterialEstimates(const PrintTimeMaterialEstimates& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.PrintTimeMaterialEstimates)
}

void PrintTimeMaterialEstimates::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_none_ = 0;
  time_inset_0_ = 0;
  time_inset_x_ = 0;
  time_skin_ = 0;
  time_support_ = 0;
  time_skirt_ = 0;
  time_infill_ = 0;
  time_support_infill_ = 0;
  time_travel_ = 0;
  time_retract_ = 0;
  time_support_interface_ = 0;
  time_prime_tower_ = 0;
}

PrintTimeMaterialEstimates::~PrintTimeMaterialEstimates() {
  // @@protoc_insertion_point(destructor:cura.proto.PrintTimeMaterialEstimates)
  SharedDtor();
}

void PrintTimeMaterialEstimates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrintTimeMaterialEstimates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintTimeMaterialEstimates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintTimeMaterialEstimates_descriptor_;
}

const PrintTimeMaterialEstimates& PrintTimeMaterialEstimates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

PrintTimeMaterialEstimates* PrintTimeMaterialEstimates::default_instance_ = NULL;

PrintTimeMaterialEstimates* PrintTimeMaterialEstimates::New(::google::protobuf::Arena* arena) const {
  PrintTimeMaterialEstimates* n = new PrintTimeMaterialEstimates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrintTimeMaterialEstimates::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.PrintTimeMaterialEstimates)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PrintTimeMaterialEstimates, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PrintTimeMaterialEstimates*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_none_, time_support_infill_);
  ZR_(time_travel_, time_prime_tower_);

#undef ZR_HELPER_
#undef ZR_

  materialestimates_.Clear();
}

bool PrintTimeMaterialEstimates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.PrintTimeMaterialEstimates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time_none = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_none_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_time_inset_0;
        break;
      }

      // optional float time_inset_0 = 2;
      case 2: {
        if (tag == 21) {
         parse_time_inset_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_inset_0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_time_inset_x;
        break;
      }

      // optional float time_inset_x = 3;
      case 3: {
        if (tag == 29) {
         parse_time_inset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_inset_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_time_skin;
        break;
      }

      // optional float time_skin = 4;
      case 4: {
        if (tag == 37) {
         parse_time_skin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_skin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_time_support;
        break;
      }

      // optional float time_support = 5;
      case 5: {
        if (tag == 45) {
         parse_time_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_support_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_time_skirt;
        break;
      }

      // optional float time_skirt = 6;
      case 6: {
        if (tag == 53) {
         parse_time_skirt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_skirt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_time_infill;
        break;
      }

      // optional float time_infill = 7;
      case 7: {
        if (tag == 61) {
         parse_time_infill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_infill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_time_support_infill;
        break;
      }

      // optional float time_support_infill = 8;
      case 8: {
        if (tag == 69) {
         parse_time_support_infill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_support_infill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_time_travel;
        break;
      }

      // optional float time_travel = 9;
      case 9: {
        if (tag == 77) {
         parse_time_travel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_travel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_time_retract;
        break;
      }

      // optional float time_retract = 10;
      case 10: {
        if (tag == 85) {
         parse_time_retract:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_retract_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_time_support_interface;
        break;
      }

      // optional float time_support_interface = 11;
      case 11: {
        if (tag == 93) {
         parse_time_support_interface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_support_interface_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_time_prime_tower;
        break;
      }

      // optional float time_prime_tower = 12;
      case 12: {
        if (tag == 101) {
         parse_time_prime_tower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_prime_tower_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_materialEstimates;
        break;
      }

      // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
      case 13: {
        if (tag == 106) {
         parse_materialEstimates:
          DO_(input->IncrementRecursionDepth());
         parse_loop_materialEstimates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_materialestimates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_materialEstimates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.PrintTimeMaterialEstimates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.PrintTimeMaterialEstimates)
  return false;
#undef DO_
}

void PrintTimeMaterialEstimates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.PrintTimeMaterialEstimates)
  // optional float time_none = 1;
  if (this->time_none() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_none(), output);
  }

  // optional float time_inset_0 = 2;
  if (this->time_inset_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_inset_0(), output);
  }

  // optional float time_inset_x = 3;
  if (this->time_inset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time_inset_x(), output);
  }

  // optional float time_skin = 4;
  if (this->time_skin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_skin(), output);
  }

  // optional float time_support = 5;
  if (this->time_support() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time_support(), output);
  }

  // optional float time_skirt = 6;
  if (this->time_skirt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time_skirt(), output);
  }

  // optional float time_infill = 7;
  if (this->time_infill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->time_infill(), output);
  }

  // optional float time_support_infill = 8;
  if (this->time_support_infill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->time_support_infill(), output);
  }

  // optional float time_travel = 9;
  if (this->time_travel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->time_travel(), output);
  }

  // optional float time_retract = 10;
  if (this->time_retract() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->time_retract(), output);
  }

  // optional float time_support_interface = 11;
  if (this->time_support_interface() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->time_support_interface(), output);
  }

  // optional float time_prime_tower = 12;
  if (this->time_prime_tower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->time_prime_tower(), output);
  }

  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  for (unsigned int i = 0, n = this->materialestimates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->materialestimates(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.PrintTimeMaterialEstimates)
}

::google::protobuf::uint8* PrintTimeMaterialEstimates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.PrintTimeMaterialEstimates)
  // optional float time_none = 1;
  if (this->time_none() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_none(), target);
  }

  // optional float time_inset_0 = 2;
  if (this->time_inset_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_inset_0(), target);
  }

  // optional float time_inset_x = 3;
  if (this->time_inset_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time_inset_x(), target);
  }

  // optional float time_skin = 4;
  if (this->time_skin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_skin(), target);
  }

  // optional float time_support = 5;
  if (this->time_support() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time_support(), target);
  }

  // optional float time_skirt = 6;
  if (this->time_skirt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time_skirt(), target);
  }

  // optional float time_infill = 7;
  if (this->time_infill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->time_infill(), target);
  }

  // optional float time_support_infill = 8;
  if (this->time_support_infill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->time_support_infill(), target);
  }

  // optional float time_travel = 9;
  if (this->time_travel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->time_travel(), target);
  }

  // optional float time_retract = 10;
  if (this->time_retract() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->time_retract(), target);
  }

  // optional float time_support_interface = 11;
  if (this->time_support_interface() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->time_support_interface(), target);
  }

  // optional float time_prime_tower = 12;
  if (this->time_prime_tower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->time_prime_tower(), target);
  }

  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  for (unsigned int i = 0, n = this->materialestimates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->materialestimates(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.PrintTimeMaterialEstimates)
  return target;
}

int PrintTimeMaterialEstimates::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.PrintTimeMaterialEstimates)
  int total_size = 0;

  // optional float time_none = 1;
  if (this->time_none() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_inset_0 = 2;
  if (this->time_inset_0() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_inset_x = 3;
  if (this->time_inset_x() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_skin = 4;
  if (this->time_skin() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_support = 5;
  if (this->time_support() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_skirt = 6;
  if (this->time_skirt() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_infill = 7;
  if (this->time_infill() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_support_infill = 8;
  if (this->time_support_infill() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_travel = 9;
  if (this->time_travel() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_retract = 10;
  if (this->time_retract() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_support_interface = 11;
  if (this->time_support_interface() != 0) {
    total_size += 1 + 4;
  }

  // optional float time_prime_tower = 12;
  if (this->time_prime_tower() != 0) {
    total_size += 1 + 4;
  }

  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  total_size += 1 * this->materialestimates_size();
  for (int i = 0; i < this->materialestimates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialestimates(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintTimeMaterialEstimates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.PrintTimeMaterialEstimates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PrintTimeMaterialEstimates* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrintTimeMaterialEstimates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.PrintTimeMaterialEstimates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.PrintTimeMaterialEstimates)
    MergeFrom(*source);
  }
}

void PrintTimeMaterialEstimates::MergeFrom(const PrintTimeMaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.PrintTimeMaterialEstimates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  materialestimates_.MergeFrom(from.materialestimates_);
  if (from.time_none() != 0) {
    set_time_none(from.time_none());
  }
  if (from.time_inset_0() != 0) {
    set_time_inset_0(from.time_inset_0());
  }
  if (from.time_inset_x() != 0) {
    set_time_inset_x(from.time_inset_x());
  }
  if (from.time_skin() != 0) {
    set_time_skin(from.time_skin());
  }
  if (from.time_support() != 0) {
    set_time_support(from.time_support());
  }
  if (from.time_skirt() != 0) {
    set_time_skirt(from.time_skirt());
  }
  if (from.time_infill() != 0) {
    set_time_infill(from.time_infill());
  }
  if (from.time_support_infill() != 0) {
    set_time_support_infill(from.time_support_infill());
  }
  if (from.time_travel() != 0) {
    set_time_travel(from.time_travel());
  }
  if (from.time_retract() != 0) {
    set_time_retract(from.time_retract());
  }
  if (from.time_support_interface() != 0) {
    set_time_support_interface(from.time_support_interface());
  }
  if (from.time_prime_tower() != 0) {
    set_time_prime_tower(from.time_prime_tower());
  }
}

void PrintTimeMaterialEstimates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.PrintTimeMaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintTimeMaterialEstimates::CopyFrom(const PrintTimeMaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.PrintTimeMaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintTimeMaterialEstimates::IsInitialized() const {

  return true;
}

void PrintTimeMaterialEstimates::Swap(PrintTimeMaterialEstimates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintTimeMaterialEstimates::InternalSwap(PrintTimeMaterialEstimates* other) {
  std::swap(time_none_, other->time_none_);
  std::swap(time_inset_0_, other->time_inset_0_);
  std::swap(time_inset_x_, other->time_inset_x_);
  std::swap(time_skin_, other->time_skin_);
  std::swap(time_support_, other->time_support_);
  std::swap(time_skirt_, other->time_skirt_);
  std::swap(time_infill_, other->time_infill_);
  std::swap(time_support_infill_, other->time_support_infill_);
  std::swap(time_travel_, other->time_travel_);
  std::swap(time_retract_, other->time_retract_);
  std::swap(time_support_interface_, other->time_support_interface_);
  std::swap(time_prime_tower_, other->time_prime_tower_);
  materialestimates_.UnsafeArenaSwap(&other->materialestimates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrintTimeMaterialEstimates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintTimeMaterialEstimates_descriptor_;
  metadata.reflection = PrintTimeMaterialEstimates_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrintTimeMaterialEstimates

// optional float time_none = 1;
void PrintTimeMaterialEstimates::clear_time_none() {
  time_none_ = 0;
}
 float PrintTimeMaterialEstimates::time_none() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_none)
  return time_none_;
}
 void PrintTimeMaterialEstimates::set_time_none(float value) {
  
  time_none_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_none)
}

// optional float time_inset_0 = 2;
void PrintTimeMaterialEstimates::clear_time_inset_0() {
  time_inset_0_ = 0;
}
 float PrintTimeMaterialEstimates::time_inset_0() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_inset_0)
  return time_inset_0_;
}
 void PrintTimeMaterialEstimates::set_time_inset_0(float value) {
  
  time_inset_0_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_inset_0)
}

// optional float time_inset_x = 3;
void PrintTimeMaterialEstimates::clear_time_inset_x() {
  time_inset_x_ = 0;
}
 float PrintTimeMaterialEstimates::time_inset_x() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_inset_x)
  return time_inset_x_;
}
 void PrintTimeMaterialEstimates::set_time_inset_x(float value) {
  
  time_inset_x_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_inset_x)
}

// optional float time_skin = 4;
void PrintTimeMaterialEstimates::clear_time_skin() {
  time_skin_ = 0;
}
 float PrintTimeMaterialEstimates::time_skin() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_skin)
  return time_skin_;
}
 void PrintTimeMaterialEstimates::set_time_skin(float value) {
  
  time_skin_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_skin)
}

// optional float time_support = 5;
void PrintTimeMaterialEstimates::clear_time_support() {
  time_support_ = 0;
}
 float PrintTimeMaterialEstimates::time_support() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support)
  return time_support_;
}
 void PrintTimeMaterialEstimates::set_time_support(float value) {
  
  time_support_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support)
}

// optional float time_skirt = 6;
void PrintTimeMaterialEstimates::clear_time_skirt() {
  time_skirt_ = 0;
}
 float PrintTimeMaterialEstimates::time_skirt() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_skirt)
  return time_skirt_;
}
 void PrintTimeMaterialEstimates::set_time_skirt(float value) {
  
  time_skirt_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_skirt)
}

// optional float time_infill = 7;
void PrintTimeMaterialEstimates::clear_time_infill() {
  time_infill_ = 0;
}
 float PrintTimeMaterialEstimates::time_infill() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_infill)
  return time_infill_;
}
 void PrintTimeMaterialEstimates::set_time_infill(float value) {
  
  time_infill_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_infill)
}

// optional float time_support_infill = 8;
void PrintTimeMaterialEstimates::clear_time_support_infill() {
  time_support_infill_ = 0;
}
 float PrintTimeMaterialEstimates::time_support_infill() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support_infill)
  return time_support_infill_;
}
 void PrintTimeMaterialEstimates::set_time_support_infill(float value) {
  
  time_support_infill_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support_infill)
}

// optional float time_travel = 9;
void PrintTimeMaterialEstimates::clear_time_travel() {
  time_travel_ = 0;
}
 float PrintTimeMaterialEstimates::time_travel() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_travel)
  return time_travel_;
}
 void PrintTimeMaterialEstimates::set_time_travel(float value) {
  
  time_travel_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_travel)
}

// optional float time_retract = 10;
void PrintTimeMaterialEstimates::clear_time_retract() {
  time_retract_ = 0;
}
 float PrintTimeMaterialEstimates::time_retract() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_retract)
  return time_retract_;
}
 void PrintTimeMaterialEstimates::set_time_retract(float value) {
  
  time_retract_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_retract)
}

// optional float time_support_interface = 11;
void PrintTimeMaterialEstimates::clear_time_support_interface() {
  time_support_interface_ = 0;
}
 float PrintTimeMaterialEstimates::time_support_interface() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support_interface)
  return time_support_interface_;
}
 void PrintTimeMaterialEstimates::set_time_support_interface(float value) {
  
  time_support_interface_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support_interface)
}

// optional float time_prime_tower = 12;
void PrintTimeMaterialEstimates::clear_time_prime_tower() {
  time_prime_tower_ = 0;
}
 float PrintTimeMaterialEstimates::time_prime_tower() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_prime_tower)
  return time_prime_tower_;
}
 void PrintTimeMaterialEstimates::set_time_prime_tower(float value) {
  
  time_prime_tower_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_prime_tower)
}

// repeated .cura.proto.MaterialEstimates materialEstimates = 13;
int PrintTimeMaterialEstimates::materialestimates_size() const {
  return materialestimates_.size();
}
void PrintTimeMaterialEstimates::clear_materialestimates() {
  materialestimates_.Clear();
}
const ::cura::proto::MaterialEstimates& PrintTimeMaterialEstimates::materialestimates(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Get(index);
}
::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::mutable_materialestimates(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Mutable(index);
}
::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::add_materialestimates() {
  // @@protoc_insertion_point(field_add:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates >*
PrintTimeMaterialEstimates::mutable_materialestimates() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return &materialestimates_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::MaterialEstimates >&
PrintTimeMaterialEstimates::materialestimates() const {
  // @@protoc_insertion_point(field_list:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialEstimates::kIdFieldNumber;
const int MaterialEstimates::kMaterialAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialEstimates::MaterialEstimates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.MaterialEstimates)
}

void MaterialEstimates::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MaterialEstimates::MaterialEstimates(const MaterialEstimates& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.MaterialEstimates)
}

void MaterialEstimates::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  material_amount_ = 0;
}

MaterialEstimates::~MaterialEstimates() {
  // @@protoc_insertion_point(destructor:cura.proto.MaterialEstimates)
  SharedDtor();
}

void MaterialEstimates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaterialEstimates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialEstimates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialEstimates_descriptor_;
}

const MaterialEstimates& MaterialEstimates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

MaterialEstimates* MaterialEstimates::default_instance_ = NULL;

MaterialEstimates* MaterialEstimates::New(::google::protobuf::Arena* arena) const {
  MaterialEstimates* n = new MaterialEstimates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialEstimates::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.MaterialEstimates)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MaterialEstimates, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MaterialEstimates*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, material_amount_);

#undef ZR_HELPER_
#undef ZR_

}

bool MaterialEstimates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.MaterialEstimates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_material_amount;
        break;
      }

      // optional float material_amount = 2;
      case 2: {
        if (tag == 21) {
         parse_material_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &material_amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.MaterialEstimates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.MaterialEstimates)
  return false;
#undef DO_
}

void MaterialEstimates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.MaterialEstimates)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional float material_amount = 2;
  if (this->material_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->material_amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.MaterialEstimates)
}

::google::protobuf::uint8* MaterialEstimates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.MaterialEstimates)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional float material_amount = 2;
  if (this->material_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->material_amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.MaterialEstimates)
  return target;
}

int MaterialEstimates::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.MaterialEstimates)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional float material_amount = 2;
  if (this->material_amount() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialEstimates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.MaterialEstimates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MaterialEstimates* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialEstimates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.MaterialEstimates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.MaterialEstimates)
    MergeFrom(*source);
  }
}

void MaterialEstimates::MergeFrom(const MaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.MaterialEstimates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.material_amount() != 0) {
    set_material_amount(from.material_amount());
  }
}

void MaterialEstimates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.MaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialEstimates::CopyFrom(const MaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.MaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialEstimates::IsInitialized() const {

  return true;
}

void MaterialEstimates::Swap(MaterialEstimates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialEstimates::InternalSwap(MaterialEstimates* other) {
  std::swap(id_, other->id_);
  std::swap(material_amount_, other->material_amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialEstimates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialEstimates_descriptor_;
  metadata.reflection = MaterialEstimates_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialEstimates

// optional int64 id = 1;
void MaterialEstimates::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MaterialEstimates::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.MaterialEstimates.id)
  return id_;
}
 void MaterialEstimates::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.MaterialEstimates.id)
}

// optional float material_amount = 2;
void MaterialEstimates::clear_material_amount() {
  material_amount_ = 0;
}
 float MaterialEstimates::material_amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.MaterialEstimates.material_amount)
  return material_amount_;
}
 void MaterialEstimates::set_material_amount(float value) {
  
  material_amount_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.MaterialEstimates.material_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingList::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingList::SettingList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SettingList)
}

void SettingList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SettingList::SettingList(const SettingList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SettingList)
}

void SettingList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SettingList::~SettingList() {
  // @@protoc_insertion_point(destructor:cura.proto.SettingList)
  SharedDtor();
}

void SettingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SettingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingList_descriptor_;
}

const SettingList& SettingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

SettingList* SettingList::default_instance_ = NULL;

SettingList* SettingList::New(::google::protobuf::Arena* arena) const {
  SettingList* n = new SettingList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettingList::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.SettingList)
  settings_.Clear();
}

bool SettingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.SettingList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.Setting settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.SettingList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.SettingList)
  return false;
#undef DO_
}

void SettingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.SettingList)
  // repeated .cura.proto.Setting settings = 1;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.SettingList)
}

::google::protobuf::uint8* SettingList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SettingList)
  // repeated .cura.proto.Setting settings = 1;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->settings(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SettingList)
  return target;
}

int SettingList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.SettingList)
  int total_size = 0;

  // repeated .cura.proto.Setting settings = 1;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.SettingList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SettingList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SettingList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.SettingList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.SettingList)
    MergeFrom(*source);
  }
}

void SettingList::MergeFrom(const SettingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.SettingList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  settings_.MergeFrom(from.settings_);
}

void SettingList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.SettingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingList::CopyFrom(const SettingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.SettingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingList::IsInitialized() const {

  return true;
}

void SettingList::Swap(SettingList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingList::InternalSwap(SettingList* other) {
  settings_.UnsafeArenaSwap(&other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SettingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingList_descriptor_;
  metadata.reflection = SettingList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettingList

// repeated .cura.proto.Setting settings = 1;
int SettingList::settings_size() const {
  return settings_.size();
}
void SettingList::clear_settings() {
  settings_.Clear();
}
const ::cura::proto::Setting& SettingList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingList.settings)
  return settings_.Get(index);
}
::cura::proto::Setting* SettingList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingList.settings)
  return settings_.Mutable(index);
}
::cura::proto::Setting* SettingList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.SettingList.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
SettingList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.SettingList.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
SettingList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.SettingList.settings)
  return settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Setting::kNameFieldNumber;
const int Setting::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Setting::Setting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Setting)
}

void Setting::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Setting::Setting(const Setting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Setting)
}

void Setting::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:cura.proto.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Setting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Setting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Setting_descriptor_;
}

const Setting& Setting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Setting* Setting::default_instance_ = NULL;

Setting* Setting::New(::google::protobuf::Arena* arena) const {
  Setting* n = new Setting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Setting)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Setting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cura.proto.Setting.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Setting)
  return false;
#undef DO_
}

void Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Setting)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Setting.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Setting)
}

::google::protobuf::uint8* Setting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Setting)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Setting.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Setting)
  return target;
}

int Setting::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Setting)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Setting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Setting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Setting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Setting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Setting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Setting)
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Setting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Setting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {

  return true;
}

void Setting::Swap(Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Setting::InternalSwap(Setting* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Setting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Setting_descriptor_;
  metadata.reflection = Setting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Setting

// optional string name = 1;
void Setting::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Setting::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.name)
}
 void Setting::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.name)
}
 void Setting::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.name)
}
 ::std::string* Setting::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Setting::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.Setting.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.name)
}

// optional bytes value = 2;
void Setting::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Setting::value() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.value)
}
 void Setting::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.value)
}
 void Setting::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.value)
}
 ::std::string* Setting::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Setting::release_value() {
  // @@protoc_insertion_point(field_release:cura.proto.Setting.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingExtruder::kNameFieldNumber;
const int SettingExtruder::kExtruderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingExtruder::SettingExtruder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SettingExtruder)
}

void SettingExtruder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SettingExtruder::SettingExtruder(const SettingExtruder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SettingExtruder)
}

void SettingExtruder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extruder_ = 0;
}

SettingExtruder::~SettingExtruder() {
  // @@protoc_insertion_point(destructor:cura.proto.SettingExtruder)
  SharedDtor();
}

void SettingExtruder::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SettingExtruder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingExtruder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingExtruder_descriptor_;
}

const SettingExtruder& SettingExtruder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

SettingExtruder* SettingExtruder::default_instance_ = NULL;

SettingExtruder* SettingExtruder::New(::google::protobuf::Arena* arena) const {
  SettingExtruder* n = new SettingExtruder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettingExtruder::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.SettingExtruder)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extruder_ = 0;
}

bool SettingExtruder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.SettingExtruder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cura.proto.SettingExtruder.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extruder;
        break;
      }

      // optional int32 extruder = 2;
      case 2: {
        if (tag == 16) {
         parse_extruder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extruder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.SettingExtruder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.SettingExtruder)
  return false;
#undef DO_
}

void SettingExtruder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.SettingExtruder)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.SettingExtruder.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 extruder = 2;
  if (this->extruder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extruder(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.SettingExtruder)
}

::google::protobuf::uint8* SettingExtruder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SettingExtruder)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.SettingExtruder.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 extruder = 2;
  if (this->extruder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extruder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SettingExtruder)
  return target;
}

int SettingExtruder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.SettingExtruder)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 extruder = 2;
  if (this->extruder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extruder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingExtruder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.SettingExtruder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SettingExtruder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SettingExtruder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.SettingExtruder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.SettingExtruder)
    MergeFrom(*source);
  }
}

void SettingExtruder::MergeFrom(const SettingExtruder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.SettingExtruder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.extruder() != 0) {
    set_extruder(from.extruder());
  }
}

void SettingExtruder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.SettingExtruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingExtruder::CopyFrom(const SettingExtruder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.SettingExtruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingExtruder::IsInitialized() const {

  return true;
}

void SettingExtruder::Swap(SettingExtruder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingExtruder::InternalSwap(SettingExtruder* other) {
  name_.Swap(&other->name_);
  std::swap(extruder_, other->extruder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SettingExtruder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingExtruder_descriptor_;
  metadata.reflection = SettingExtruder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettingExtruder

// optional string name = 1;
void SettingExtruder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SettingExtruder::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingExtruder.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SettingExtruder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.SettingExtruder.name)
}
 void SettingExtruder::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.SettingExtruder.name)
}
 void SettingExtruder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.SettingExtruder.name)
}
 ::std::string* SettingExtruder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingExtruder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SettingExtruder::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.SettingExtruder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SettingExtruder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.SettingExtruder.name)
}

// optional int32 extruder = 2;
void SettingExtruder::clear_extruder() {
  extruder_ = 0;
}
 ::google::protobuf::int32 SettingExtruder::extruder() const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingExtruder.extruder)
  return extruder_;
}
 void SettingExtruder::set_extruder(::google::protobuf::int32 value) {
  
  extruder_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.SettingExtruder.extruder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCodePrefix::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCodePrefix::GCodePrefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.GCodePrefix)
}

void GCodePrefix::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GCodePrefix::GCodePrefix(const GCodePrefix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.GCodePrefix)
}

void GCodePrefix::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GCodePrefix::~GCodePrefix() {
  // @@protoc_insertion_point(destructor:cura.proto.GCodePrefix)
  SharedDtor();
}

void GCodePrefix::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GCodePrefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCodePrefix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCodePrefix_descriptor_;
}

const GCodePrefix& GCodePrefix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

GCodePrefix* GCodePrefix::default_instance_ = NULL;

GCodePrefix* GCodePrefix::New(::google::protobuf::Arena* arena) const {
  GCodePrefix* n = new GCodePrefix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCodePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.GCodePrefix)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GCodePrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.GCodePrefix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.GCodePrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.GCodePrefix)
  return false;
#undef DO_
}

void GCodePrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.GCodePrefix)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.GCodePrefix)
}

::google::protobuf::uint8* GCodePrefix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.GCodePrefix)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.GCodePrefix)
  return target;
}

int GCodePrefix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.GCodePrefix)
  int total_size = 0;

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCodePrefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.GCodePrefix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GCodePrefix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GCodePrefix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.GCodePrefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.GCodePrefix)
    MergeFrom(*source);
  }
}

void GCodePrefix::MergeFrom(const GCodePrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.GCodePrefix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GCodePrefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.GCodePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCodePrefix::CopyFrom(const GCodePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.GCodePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCodePrefix::IsInitialized() const {

  return true;
}

void GCodePrefix::Swap(GCodePrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCodePrefix::InternalSwap(GCodePrefix* other) {
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCodePrefix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCodePrefix_descriptor_;
  metadata.reflection = GCodePrefix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCodePrefix

// optional bytes data = 2;
void GCodePrefix::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GCodePrefix::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodePrefix.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodePrefix::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodePrefix.data)
}
 void GCodePrefix::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodePrefix.data)
}
 void GCodePrefix::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodePrefix.data)
}
 ::std::string* GCodePrefix::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodePrefix.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GCodePrefix::release_data() {
  // @@protoc_insertion_point(field_release:cura.proto.GCodePrefix.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodePrefix::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodePrefix.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlicingFinished::SlicingFinished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SlicingFinished)
}

void SlicingFinished::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SlicingFinished::SlicingFinished(const SlicingFinished& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SlicingFinished)
}

void SlicingFinished::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SlicingFinished::~SlicingFinished() {
  // @@protoc_insertion_point(destructor:cura.proto.SlicingFinished)
  SharedDtor();
}

void SlicingFinished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlicingFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlicingFinished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlicingFinished_descriptor_;
}

const SlicingFinished& SlicingFinished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

SlicingFinished* SlicingFinished::default_instance_ = NULL;

SlicingFinished* SlicingFinished::New(::google::protobuf::Arena* arena) const {
  SlicingFinished* n = new SlicingFinished;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlicingFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.SlicingFinished)
}

bool SlicingFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.SlicingFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.SlicingFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.SlicingFinished)
  return false;
#undef DO_
}

void SlicingFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.SlicingFinished)
  // @@protoc_insertion_point(serialize_end:cura.proto.SlicingFinished)
}

::google::protobuf::uint8* SlicingFinished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SlicingFinished)
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SlicingFinished)
  return target;
}

int SlicingFinished::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.SlicingFinished)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlicingFinished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.SlicingFinished)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SlicingFinished* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SlicingFinished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.SlicingFinished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.SlicingFinished)
    MergeFrom(*source);
  }
}

void SlicingFinished::MergeFrom(const SlicingFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.SlicingFinished)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SlicingFinished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.SlicingFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlicingFinished::CopyFrom(const SlicingFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.SlicingFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlicingFinished::IsInitialized() const {

  return true;
}

void SlicingFinished::Swap(SlicingFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlicingFinished::InternalSwap(SlicingFinished* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlicingFinished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlicingFinished_descriptor_;
  metadata.reflection = SlicingFinished_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlicingFinished

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cura

// @@protoc_insertion_point(global_scope)
